
electric_heat_water.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002732  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00002732  000027c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080006a  0080006a  000027d0  2**0
                  ALLOC
  3 .stab         0000345c  00000000  00000000  000027d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019e2  00000000  00000000  00005c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000760e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000774e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009507  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a3f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b300  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b58d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__vector_1>
       8:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__vector_2>
       c:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__vector_3>
      10:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 10 	call	0x205a	; 0x205a <main>
      8a:	0c 94 97 13 	jmp	0x272e	; 0x272e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TWI_initMaster>:
/* MCAL */
#include "TWI_interface.h"

//Function to initialize the I2C interface as a master
void TWI_initMaster(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//SER PRESCALER = 1 => FREQ 400KHZ
	 TWBR = 12;
     b4e:	e0 e2       	ldi	r30, 0x20	; 32
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8c e0       	ldi	r24, 0x0C	; 12
     b54:	80 83       	st	Z, r24
	 CLR_BIT(TWSR,0);
     b56:	a1 e2       	ldi	r26, 0x21	; 33
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e1 e2       	ldi	r30, 0x21	; 33
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8e 7f       	andi	r24, 0xFE	; 254
     b62:	8c 93       	st	X, r24
	 CLR_BIT(TWSR,1);
     b64:	a1 e2       	ldi	r26, 0x21	; 33
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e1 e2       	ldi	r30, 0x21	; 33
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8d 7f       	andi	r24, 0xFD	; 253
     b70:	8c 93       	st	X, r24

	 //ENABLE ACK BIT
	 SET_BIT(TWCR,6);
     b72:	a6 e5       	ldi	r26, 0x56	; 86
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e6 e5       	ldi	r30, 0x56	; 86
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 64       	ori	r24, 0x40	; 64
     b7e:	8c 93       	st	X, r24

	 SET_BIT(TWCR,2); //TWI Enable
     b80:	a6 e5       	ldi	r26, 0x56	; 86
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e6 e5       	ldi	r30, 0x56	; 86
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	84 60       	ori	r24, 0x04	; 4
     b8c:	8c 93       	st	X, r24
}
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <TWI_sendStartCondition>:

//Function to send a start condition to the slave
void TWI_sendStartCondition(void)
{
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,5); //send start condition
     b9c:	a6 e5       	ldi	r26, 0x56	; 86
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e6 e5       	ldi	r30, 0x56	; 86
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	80 62       	ori	r24, 0x20	; 32
     ba8:	8c 93       	st	X, r24

	//clear flag to start current job
	SET_BIT(TWCR,7);
     baa:	a6 e5       	ldi	r26, 0x56	; 86
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e6 e5       	ldi	r30, 0x56	; 86
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	80 68       	ori	r24, 0x80	; 128
     bb6:	8c 93       	st	X, r24

	//wait for flag
	while(0 == GET_BIT(TWCR,7));
     bb8:	e6 e5       	ldi	r30, 0x56	; 86
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	88 23       	and	r24, r24
     bc0:	dc f7       	brge	.-10     	; 0xbb8 <TWI_sendStartCondition+0x24>

	//check ACK = Slave address ACK
    while((TWSR&0xF8)  != 0x08);
     bc2:	e1 e2       	ldi	r30, 0x21	; 33
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	88 7f       	andi	r24, 0xF8	; 248
     bce:	90 70       	andi	r25, 0x00	; 0
     bd0:	88 30       	cpi	r24, 0x08	; 8
     bd2:	91 05       	cpc	r25, r1
     bd4:	b1 f7       	brne	.-20     	; 0xbc2 <TWI_sendStartCondition+0x2e>
}
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <TWI_sendRepStartCondition>:

//Function to send a repeated start condition to the slave
void TWI_sendRepStartCondition(void)
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,5); //send start condition
     be4:	a6 e5       	ldi	r26, 0x56	; 86
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e6 e5       	ldi	r30, 0x56	; 86
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	80 62       	ori	r24, 0x20	; 32
     bf0:	8c 93       	st	X, r24

	//clear flag to start current job
	SET_BIT(TWCR,7);
     bf2:	a6 e5       	ldi	r26, 0x56	; 86
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e6 e5       	ldi	r30, 0x56	; 86
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	8c 93       	st	X, r24

	//wait for flag
	while(0 == GET_BIT(TWCR,7));
     c00:	e6 e5       	ldi	r30, 0x56	; 86
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	88 23       	and	r24, r24
     c08:	dc f7       	brge	.-10     	; 0xc00 <TWI_sendRepStartCondition+0x24>

	//check ACK = repeated start condition ACK
    while((TWSR&0xF8) != 0x10);
     c0a:	e1 e2       	ldi	r30, 0x21	; 33
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 7f       	andi	r24, 0xF8	; 248
     c16:	90 70       	andi	r25, 0x00	; 0
     c18:	80 31       	cpi	r24, 0x10	; 16
     c1a:	91 05       	cpc	r25, r1
     c1c:	b1 f7       	brne	.-20     	; 0xc0a <TWI_sendRepStartCondition+0x2e>

}
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <TWI_sendStopCondition>:

//Function to send a stop condition to the slave
void TWI_sendStopCondition(void)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,4); //send stop condition
     c2c:	a6 e5       	ldi	r26, 0x56	; 86
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e6 e5       	ldi	r30, 0x56	; 86
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	80 61       	ori	r24, 0x10	; 16
     c38:	8c 93       	st	X, r24

	//clear flag to start current job
	SET_BIT(TWCR,7);
     c3a:	a6 e5       	ldi	r26, 0x56	; 86
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e6 e5       	ldi	r30, 0x56	; 86
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	80 68       	ori	r24, 0x80	; 128
     c46:	8c 93       	st	X, r24
}
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <TWI_sendSlaveAddWithWrite>:

//Function to send the slave address with write operation
void TWI_sendSlaveAddWithWrite(u8 slaveAdd)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	0f 92       	push	r0
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	89 83       	std	Y+1, r24	; 0x01

	TWDR = slaveAdd << 1;
     c5a:	e3 e2       	ldi	r30, 0x23	; 35
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	88 0f       	add	r24, r24
     c62:	80 83       	st	Z, r24
	//select Write operation
	CLR_BIT(TWDR,0);
     c64:	a3 e2       	ldi	r26, 0x23	; 35
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e3 e2       	ldi	r30, 0x23	; 35
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	8e 7f       	andi	r24, 0xFE	; 254
     c70:	8c 93       	st	X, r24

	CLR_BIT(TWCR,5); //CLEAR  SC BIT
     c72:	a6 e5       	ldi	r26, 0x56	; 86
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e6 e5       	ldi	r30, 0x56	; 86
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8f 7d       	andi	r24, 0xDF	; 223
     c7e:	8c 93       	st	X, r24

	//clear flag to start current job
	SET_BIT(TWCR,7);
     c80:	a6 e5       	ldi	r26, 0x56	; 86
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e6 e5       	ldi	r30, 0x56	; 86
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 68       	ori	r24, 0x80	; 128
     c8c:	8c 93       	st	X, r24
	//wait for flag
	while(0 == GET_BIT(TWCR,7));
     c8e:	e6 e5       	ldi	r30, 0x56	; 86
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	88 23       	and	r24, r24
     c96:	dc f7       	brge	.-10     	; 0xc8e <TWI_sendSlaveAddWithWrite+0x40>

	//check ACK = Slave address with write operation ACK
    while((TWSR&0xF8) != 0x18);
     c98:	e1 e2       	ldi	r30, 0x21	; 33
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	88 7f       	andi	r24, 0xF8	; 248
     ca4:	90 70       	andi	r25, 0x00	; 0
     ca6:	88 31       	cpi	r24, 0x18	; 24
     ca8:	91 05       	cpc	r25, r1
     caa:	b1 f7       	brne	.-20     	; 0xc98 <TWI_sendSlaveAddWithWrite+0x4a>

}
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <TWI_sendSlaveAddWithRead>:

//Function to send the slave address with read operation
void TWI_sendSlaveAddWithRead(u8 slaveAdd)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	TWDR = slaveAdd << 1;
     cc0:	e3 e2       	ldi	r30, 0x23	; 35
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	88 0f       	add	r24, r24
     cc8:	80 83       	st	Z, r24
	//select read operation
	SET_BIT(TWDR,0);
     cca:	a3 e2       	ldi	r26, 0x23	; 35
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e3 e2       	ldi	r30, 0x23	; 35
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	81 60       	ori	r24, 0x01	; 1
     cd6:	8c 93       	st	X, r24

	CLR_BIT(TWCR,5); //CLEAR  SC BIT
     cd8:	a6 e5       	ldi	r26, 0x56	; 86
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e6 e5       	ldi	r30, 0x56	; 86
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8f 7d       	andi	r24, 0xDF	; 223
     ce4:	8c 93       	st	X, r24

	//clear flag to start current job
	SET_BIT(TWCR,7);
     ce6:	a6 e5       	ldi	r26, 0x56	; 86
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e6 e5       	ldi	r30, 0x56	; 86
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 68       	ori	r24, 0x80	; 128
     cf2:	8c 93       	st	X, r24
	//wait for flag
	while(0 == GET_BIT(TWCR,7));
     cf4:	e6 e5       	ldi	r30, 0x56	; 86
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	88 23       	and	r24, r24
     cfc:	dc f7       	brge	.-10     	; 0xcf4 <TWI_sendSlaveAddWithRead+0x40>

	//check ACK = Slave address with read operation ACK
    while( (TWSR&0xF8) != 0x40);
     cfe:	e1 e2       	ldi	r30, 0x21	; 33
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	88 2f       	mov	r24, r24
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	88 7f       	andi	r24, 0xF8	; 248
     d0a:	90 70       	andi	r25, 0x00	; 0
     d0c:	80 34       	cpi	r24, 0x40	; 64
     d0e:	91 05       	cpc	r25, r1
     d10:	b1 f7       	brne	.-20     	; 0xcfe <TWI_sendSlaveAddWithRead+0x4a>
}
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <TWI_sendMasterDataByte>:

//Function to send  data byte to the slave
void TWI_sendMasterDataByte(u8 data)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data; //write data in register
     d26:	e3 e2       	ldi	r30, 0x23	; 35
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	80 83       	st	Z, r24
	//clear flag to start current job
	SET_BIT(TWCR,7);
     d2e:	a6 e5       	ldi	r26, 0x56	; 86
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e6 e5       	ldi	r30, 0x56	; 86
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 68       	ori	r24, 0x80	; 128
     d3a:	8c 93       	st	X, r24
	//wait for flag
	while(0 == GET_BIT(TWCR,7));
     d3c:	e6 e5       	ldi	r30, 0x56	; 86
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	88 23       	and	r24, r24
     d44:	dc f7       	brge	.-10     	; 0xd3c <TWI_sendMasterDataByte+0x22>

	//check ACK = Transmit Data
    while( (TWSR&0xF8) != 0x28);
     d46:	e1 e2       	ldi	r30, 0x21	; 33
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	88 7f       	andi	r24, 0xF8	; 248
     d52:	90 70       	andi	r25, 0x00	; 0
     d54:	88 32       	cpi	r24, 0x28	; 40
     d56:	91 05       	cpc	r25, r1
     d58:	b1 f7       	brne	.-20     	; 0xd46 <TWI_sendMasterDataByte+0x2c>

}
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <WI_recieveMasterDataByte>:

//Function to receive  data byte to the slave
u8 WI_recieveMasterDataByte(void)
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	0f 92       	push	r0
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
	u8 returnedData;
	//clear flag to start current job
	SET_BIT(TWCR,7);
     d6c:	a6 e5       	ldi	r26, 0x56	; 86
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e6 e5       	ldi	r30, 0x56	; 86
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 68       	ori	r24, 0x80	; 128
     d78:	8c 93       	st	X, r24
     d7a:	0a c0       	rjmp	.+20     	; 0xd90 <WI_recieveMasterDataByte+0x2e>
	//wait for flag
	while(0 == GET_BIT(TWCR,7))
	//check ACK = Receive Data
	while( (TWSR&0xF8) != 0x50);
     d7c:	e1 e2       	ldi	r30, 0x21	; 33
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	88 7f       	andi	r24, 0xF8	; 248
     d88:	90 70       	andi	r25, 0x00	; 0
     d8a:	80 35       	cpi	r24, 0x50	; 80
     d8c:	91 05       	cpc	r25, r1
     d8e:	b1 f7       	brne	.-20     	; 0xd7c <WI_recieveMasterDataByte+0x1a>
{
	u8 returnedData;
	//clear flag to start current job
	SET_BIT(TWCR,7);
	//wait for flag
	while(0 == GET_BIT(TWCR,7))
     d90:	e6 e5       	ldi	r30, 0x56	; 86
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	88 23       	and	r24, r24
     d98:	8c f7       	brge	.-30     	; 0xd7c <WI_recieveMasterDataByte+0x1a>
	//check ACK = Receive Data
	while( (TWSR&0xF8) != 0x50);
	returnedData = TWDR;
     d9a:	e3 e2       	ldi	r30, 0x23	; 35
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	89 83       	std	Y+1, r24	; 0x01
	return returnedData;
     da2:	89 81       	ldd	r24, Y+1	; 0x01

}
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <TMR2_init>:
#include "TMR2_interface.h"
#include "TMR2_config.h"

//Function to Initialize Timer 2 according to a Desired Mode
void TMR2_init(void)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = TMR2_PRELOAD_VALUE;

	SET_BIT(TIMSK,TMR2_OverflowIn);
#elif TMR2_MODE == TMR2_CTC_MODE
	//NORMAL MODE
	CLR_BIT(TCCR2,PWM2);
     db4:	a5 e4       	ldi	r26, 0x45	; 69
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e5 e4       	ldi	r30, 0x45	; 69
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8f 7b       	andi	r24, 0xBF	; 191
     dc0:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CTC2);
     dc2:	a5 e4       	ldi	r26, 0x45	; 69
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e5 e4       	ldi	r30, 0x45	; 69
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	88 60       	ori	r24, 0x08	; 8
     dce:	8c 93       	st	X, r24

	SET_BIT(TIMSK,TMR2_OutputCompareMatchIn); //CTC INTERRUPT
     dd0:	a9 e5       	ldi	r26, 0x59	; 89
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e9 e5       	ldi	r30, 0x59	; 89
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 68       	ori	r24, 0x80	; 128
     ddc:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , COM21);

	SET_BIT(DDRB,3); //SET 0C0 AS OUTPUT

#endif
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <TMR2_start>:

//Function to Start Timer 2 CLK
void TMR2_start(void)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	//PRESCALER = 64
	CLR_BIT(TCCR2,CS20);
     dec:	a5 e4       	ldi	r26, 0x45	; 69
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e4       	ldi	r30, 0x45	; 69
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8e 7f       	andi	r24, 0xFE	; 254
     df8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS21);
     dfa:	a5 e4       	ldi	r26, 0x45	; 69
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e5 e4       	ldi	r30, 0x45	; 69
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8d 7f       	andi	r24, 0xFD	; 253
     e06:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22);
     e08:	a5 e4       	ldi	r26, 0x45	; 69
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e5 e4       	ldi	r30, 0x45	; 69
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	84 60       	ori	r24, 0x04	; 4
     e14:	8c 93       	st	X, r24
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <TMR2_stop>:

//Function to Stop Timer 2 CLK
void TMR2_stop(void)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	//PRESCALER = 64
	CLR_BIT(TCCR2,CS20);
     e24:	a5 e4       	ldi	r26, 0x45	; 69
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e5 e4       	ldi	r30, 0x45	; 69
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8e 7f       	andi	r24, 0xFE	; 254
     e30:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS21);
     e32:	a5 e4       	ldi	r26, 0x45	; 69
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e5 e4       	ldi	r30, 0x45	; 69
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	8d 7f       	andi	r24, 0xFD	; 253
     e3e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS22);
     e40:	a5 e4       	ldi	r26, 0x45	; 69
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e5 e4       	ldi	r30, 0x45	; 69
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8b 7f       	andi	r24, 0xFB	; 251
     e4c:	8c 93       	st	X, r24
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <TMR2_setCompareMatchValue>:

// Function to set the compare match value for Timer 2 by setting the value of the OCR2 register.
void TMR2_setCompareMatchValue(u8 OCR2_Value)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = OCR2_Value;
     e60:	e3 e4       	ldi	r30, 0x43	; 67
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	80 83       	st	Z, r24
}
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <TMR1_init>:
/* MCAL */
#include "TMR1_interface.h"

//Function to Initialize Timer 1 according to PWM Mode 14
void TMR1_init(void)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
	//Fast PWM Mode 14
	CLR_BIT(TCCR1A,WGM10);
     e78:	af e4       	ldi	r26, 0x4F	; 79
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	ef e4       	ldi	r30, 0x4F	; 79
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	8e 7f       	andi	r24, 0xFE	; 254
     e84:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
     e86:	af e4       	ldi	r26, 0x4F	; 79
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	ef e4       	ldi	r30, 0x4F	; 79
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	82 60       	ori	r24, 0x02	; 2
     e92:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
     e94:	ae e4       	ldi	r26, 0x4E	; 78
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ee e4       	ldi	r30, 0x4E	; 78
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 60       	ori	r24, 0x08	; 8
     ea0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
     ea2:	ae e4       	ldi	r26, 0x4E	; 78
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ee e4       	ldi	r30, 0x4E	; 78
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 61       	ori	r24, 0x10	; 16
     eae:	8c 93       	st	X, r24


	//Non Inverting Mode
	CLR_BIT(TCCR1A,COM1A0);
     eb0:	af e4       	ldi	r26, 0x4F	; 79
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ef e4       	ldi	r30, 0x4F	; 79
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 7b       	andi	r24, 0xBF	; 191
     ebc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
     ebe:	af e4       	ldi	r26, 0x4F	; 79
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	ef e4       	ldi	r30, 0x4F	; 79
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	80 68       	ori	r24, 0x80	; 128
     eca:	8c 93       	st	X, r24


	SET_BIT(DDRD,5);
     ecc:	a1 e3       	ldi	r26, 0x31	; 49
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e1 e3       	ldi	r30, 0x31	; 49
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	80 62       	ori	r24, 0x20	; 32
     ed8:	8c 93       	st	X, r24

    // ICR1 >> period time = 20ms >> freq. = 50HZ
	ICR1_u16 = CounterValue;
     eda:	e6 e4       	ldi	r30, 0x46	; 70
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	87 e8       	ldi	r24, 0x87	; 135
     ee0:	93 e1       	ldi	r25, 0x13	; 19
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24


}
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <TMR1_start>:

//Function to Start Timer 1 CLK
void TMR1_start(void)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
	//Prescaler 64
	SET_BIT(TCCR1B,CS10);
     ef4:	ae e4       	ldi	r26, 0x4E	; 78
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ee e4       	ldi	r30, 0x4E	; 78
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	81 60       	ori	r24, 0x01	; 1
     f00:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
     f02:	ae e4       	ldi	r26, 0x4E	; 78
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ee e4       	ldi	r30, 0x4E	; 78
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
     f10:	ae e4       	ldi	r26, 0x4E	; 78
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ee e4       	ldi	r30, 0x4E	; 78
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8b 7f       	andi	r24, 0xFB	; 251
     f1c:	8c 93       	st	X, r24
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <TMR1_stop>:

//Function to Stop Timer 1 CLK
void TMR1_stop(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TCCR1B,CS10);
     f2c:	ae e4       	ldi	r26, 0x4E	; 78
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ee e4       	ldi	r30, 0x4E	; 78
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
     f3a:	ae e4       	ldi	r26, 0x4E	; 78
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ee e4       	ldi	r30, 0x4E	; 78
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8d 7f       	andi	r24, 0xFD	; 253
     f46:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
     f48:	ae e4       	ldi	r26, 0x4E	; 78
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ee e4       	ldi	r30, 0x4E	; 78
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8b 7f       	andi	r24, 0xFB	; 251
     f54:	8c 93       	st	X, r24
}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <TMR1_setCompareMatchValueA>:


// Function to set the compare match value for Timer 1 by setting the value of the OCR1 register.
void TMR1_setCompareMatchValueA(u16 value)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	00 d0       	rcall	.+0      	; 0xf62 <TMR1_setCompareMatchValueA+0x6>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	89 83       	std	Y+1, r24	; 0x01
	//Compare Value
	OCR1A_u16 = value;
     f6a:	ea e4       	ldi	r30, 0x4A	; 74
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	80 83       	st	Z, r24
}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <TMR0_init>:
#include "TMR0_interface.h"
#include "TMR0_config.h"

//Function to Initialize Timer 0 according to a Desired Mode
void TMR0_init(void)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = TMR0_PRELOAD_VALUE;

	SET_BIT(TIMSK,TMR0_OverflowIn);
#elif TMR0_MODE == TMR0_CTC_MODE
	//NORMAL MODE
	CLR_BIT(TCCR0,PWM0);
     f88:	a3 e5       	ldi	r26, 0x53	; 83
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e3 e5       	ldi	r30, 0x53	; 83
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8f 7b       	andi	r24, 0xBF	; 191
     f94:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CTC0);
     f96:	a3 e5       	ldi	r26, 0x53	; 83
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e3 e5       	ldi	r30, 0x53	; 83
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 60       	ori	r24, 0x08	; 8
     fa2:	8c 93       	st	X, r24

	SET_BIT(TIMSK,TMR0_OutputCompareMatchIn); //CTC INTERRUPT
     fa4:	a9 e5       	ldi	r26, 0x59	; 89
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e9 e5       	ldi	r30, 0x59	; 89
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	82 60       	ori	r24, 0x02	; 2
     fb0:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , COM01);

	SET_BIT(DDRB,3); //SET 0C0 AS OUTPUT

#endif
}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <TMR0_start>:

//Function to Start Timer 0 CLK
void TMR0_start(void)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
	//PRESCALER = 64
	SET_BIT(TCCR0,CS00);
     fc0:	a3 e5       	ldi	r26, 0x53	; 83
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e3 e5       	ldi	r30, 0x53	; 83
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
     fce:	a3 e5       	ldi	r26, 0x53	; 83
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e3 e5       	ldi	r30, 0x53	; 83
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	82 60       	ori	r24, 0x02	; 2
     fda:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
     fdc:	a3 e5       	ldi	r26, 0x53	; 83
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e3 e5       	ldi	r30, 0x53	; 83
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8b 7f       	andi	r24, 0xFB	; 251
     fe8:	8c 93       	st	X, r24
}
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <TMR0_stop>:

//Function to Stop Timer 0 CLK
void TMR0_stop(void)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,CS00);
     ff8:	a3 e5       	ldi	r26, 0x53	; 83
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e3 e5       	ldi	r30, 0x53	; 83
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8e 7f       	andi	r24, 0xFE	; 254
    1004:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
    1006:	a3 e5       	ldi	r26, 0x53	; 83
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e3 e5       	ldi	r30, 0x53	; 83
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8d 7f       	andi	r24, 0xFD	; 253
    1012:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    1014:	a3 e5       	ldi	r26, 0x53	; 83
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e3 e5       	ldi	r30, 0x53	; 83
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8b 7f       	andi	r24, 0xFB	; 251
    1020:	8c 93       	st	X, r24
}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <TMR0_setCompareMatchValue>:

// Function to set the compare match value for Timer 0 by setting the value of the OCR0 register.
void TMR0_setCompareMatchValue(u8 OCR0_Value)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = OCR0_Value;
    1034:	ec e5       	ldi	r30, 0x5C	; 92
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	80 83       	st	Z, r24
}
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <GI_enable>:
/* MCAL */
#include "GI_interface.h"

//Function to Enable the Global Interrupt
void GI_enable(void)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    104c:	af e5       	ldi	r26, 0x5F	; 95
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ef e5       	ldi	r30, 0x5F	; 95
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 68       	ori	r24, 0x80	; 128
    1058:	8c 93       	st	X, r24
}
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <GI_disable>:

//Function to Disable the Global Interrupt
void GI_disable(void)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1068:	af e5       	ldi	r26, 0x5F	; 95
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ef e5       	ldi	r30, 0x5F	; 95
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8f 77       	andi	r24, 0x7F	; 127
    1074:	8c 93       	st	X, r24
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <EXTI_enable>:
/* MCAL */
#include "EXTI_interface.h"

//Function to enable the Desired External Interrupt along with its event of occurrence
void EXTI_enable(u8 interruptSource, u8 interruptTriggerEdge)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <EXTI_enable+0x6>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <EXTI_enable+0x8>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	6a 83       	std	Y+2, r22	; 0x02
	switch(interruptSource)
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	3c 83       	std	Y+4, r19	; 0x04
    1094:	2b 83       	std	Y+3, r18	; 0x03
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <EXTI_enable+0x26>
    10a0:	61 c0       	rjmp	.+194    	; 0x1164 <EXTI_enable+0xe8>
    10a2:	2b 81       	ldd	r18, Y+3	; 0x03
    10a4:	3c 81       	ldd	r19, Y+4	; 0x04
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <EXTI_enable+0x32>
    10ac:	b1 c0       	rjmp	.+354    	; 0x1210 <EXTI_enable+0x194>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <EXTI_enable+0x3c>
    10b6:	cf c0       	rjmp	.+414    	; 0x1256 <EXTI_enable+0x1da>
	{
		case EXTI_INT0 :
			if(EXTI_RISING_EDGE == interruptTriggerEdge)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	88 23       	and	r24, r24
    10bc:	79 f4       	brne	.+30     	; 0x10dc <EXTI_enable+0x60>
			{
				SET_BIT(MCUCR,ISC00);
    10be:	a5 e5       	ldi	r26, 0x55	; 85
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e5       	ldi	r30, 0x55	; 85
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	81 60       	ori	r24, 0x01	; 1
    10ca:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01);
    10cc:	a5 e5       	ldi	r26, 0x55	; 85
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e5       	ldi	r30, 0x55	; 85
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	82 60       	ori	r24, 0x02	; 2
    10d8:	8c 93       	st	X, r24
    10da:	35 c0       	rjmp	.+106    	; 0x1146 <EXTI_enable+0xca>
			}
			else if(EXTI_FALLING_EDGE == interruptTriggerEdge)
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	79 f4       	brne	.+30     	; 0x1100 <EXTI_enable+0x84>
			{
				CLR_BIT(MCUCR,ISC00);
    10e2:	a5 e5       	ldi	r26, 0x55	; 85
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e5 e5       	ldi	r30, 0x55	; 85
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8e 7f       	andi	r24, 0xFE	; 254
    10ee:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01);
    10f0:	a5 e5       	ldi	r26, 0x55	; 85
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e5 e5       	ldi	r30, 0x55	; 85
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	82 60       	ori	r24, 0x02	; 2
    10fc:	8c 93       	st	X, r24
    10fe:	23 c0       	rjmp	.+70     	; 0x1146 <EXTI_enable+0xca>
			}
			else if(EXTI_LOW_LEVEL == interruptTriggerEdge)
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	79 f4       	brne	.+30     	; 0x1124 <EXTI_enable+0xa8>
			{
				CLR_BIT(MCUCR,ISC00);
    1106:	a5 e5       	ldi	r26, 0x55	; 85
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e5 e5       	ldi	r30, 0x55	; 85
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8e 7f       	andi	r24, 0xFE	; 254
    1112:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC01);
    1114:	a5 e5       	ldi	r26, 0x55	; 85
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e5       	ldi	r30, 0x55	; 85
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8d 7f       	andi	r24, 0xFD	; 253
    1120:	8c 93       	st	X, r24
    1122:	11 c0       	rjmp	.+34     	; 0x1146 <EXTI_enable+0xca>
			}
			else if(EXTI_ANY_LOGICAL_CHANGE == interruptTriggerEdge)
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	71 f4       	brne	.+28     	; 0x1146 <EXTI_enable+0xca>
			{
				CLR_BIT(MCUCR,ISC00);
    112a:	a5 e5       	ldi	r26, 0x55	; 85
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e5       	ldi	r30, 0x55	; 85
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8e 7f       	andi	r24, 0xFE	; 254
    1136:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01);
    1138:	a5 e5       	ldi	r26, 0x55	; 85
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e5 e5       	ldi	r30, 0x55	; 85
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	8c 93       	st	X, r24
			}
			CLR_BIT(DDRD,2);
    1146:	a1 e3       	ldi	r26, 0x31	; 49
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e1 e3       	ldi	r30, 0x31	; 49
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8b 7f       	andi	r24, 0xFB	; 251
    1152:	8c 93       	st	X, r24
			SET_BIT(GICR,INT0); //ENABLE INT0
    1154:	ab e5       	ldi	r26, 0x5B	; 91
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	eb e5       	ldi	r30, 0x5B	; 91
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 64       	ori	r24, 0x40	; 64
    1160:	8c 93       	st	X, r24
    1162:	79 c0       	rjmp	.+242    	; 0x1256 <EXTI_enable+0x1da>
			break;
		case EXTI_INT1 :
			if(EXTI_RISING_EDGE == interruptTriggerEdge)
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	88 23       	and	r24, r24
    1168:	79 f4       	brne	.+30     	; 0x1188 <EXTI_enable+0x10c>
			{
				SET_BIT(MCUCR,ISC10);
    116a:	a5 e5       	ldi	r26, 0x55	; 85
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e5 e5       	ldi	r30, 0x55	; 85
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	84 60       	ori	r24, 0x04	; 4
    1176:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1178:	a5 e5       	ldi	r26, 0x55	; 85
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e5 e5       	ldi	r30, 0x55	; 85
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	88 60       	ori	r24, 0x08	; 8
    1184:	8c 93       	st	X, r24
    1186:	35 c0       	rjmp	.+106    	; 0x11f2 <EXTI_enable+0x176>
			}
			else if(EXTI_FALLING_EDGE == interruptTriggerEdge)
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	79 f4       	brne	.+30     	; 0x11ac <EXTI_enable+0x130>
			{
				CLR_BIT(MCUCR,ISC10);
    118e:	a5 e5       	ldi	r26, 0x55	; 85
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e5 e5       	ldi	r30, 0x55	; 85
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8b 7f       	andi	r24, 0xFB	; 251
    119a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    119c:	a5 e5       	ldi	r26, 0x55	; 85
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e5       	ldi	r30, 0x55	; 85
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	88 60       	ori	r24, 0x08	; 8
    11a8:	8c 93       	st	X, r24
    11aa:	23 c0       	rjmp	.+70     	; 0x11f2 <EXTI_enable+0x176>
			}
			else if(EXTI_LOW_LEVEL == interruptTriggerEdge)
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	79 f4       	brne	.+30     	; 0x11d0 <EXTI_enable+0x154>
			{
				CLR_BIT(MCUCR,ISC10);
    11b2:	a5 e5       	ldi	r26, 0x55	; 85
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e5       	ldi	r30, 0x55	; 85
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8b 7f       	andi	r24, 0xFB	; 251
    11be:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    11c0:	a5 e5       	ldi	r26, 0x55	; 85
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e5 e5       	ldi	r30, 0x55	; 85
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	87 7f       	andi	r24, 0xF7	; 247
    11cc:	8c 93       	st	X, r24
    11ce:	11 c0       	rjmp	.+34     	; 0x11f2 <EXTI_enable+0x176>
			}
			else if(EXTI_ANY_LOGICAL_CHANGE == interruptTriggerEdge)
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	83 30       	cpi	r24, 0x03	; 3
    11d4:	71 f4       	brne	.+28     	; 0x11f2 <EXTI_enable+0x176>
			{
				SET_BIT(MCUCR,ISC10);
    11d6:	a5 e5       	ldi	r26, 0x55	; 85
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e5 e5       	ldi	r30, 0x55	; 85
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	84 60       	ori	r24, 0x04	; 4
    11e2:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    11e4:	a5 e5       	ldi	r26, 0x55	; 85
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e5 e5       	ldi	r30, 0x55	; 85
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	87 7f       	andi	r24, 0xF7	; 247
    11f0:	8c 93       	st	X, r24
			}
			CLR_BIT(DDRD,3);
    11f2:	a1 e3       	ldi	r26, 0x31	; 49
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e1 e3       	ldi	r30, 0x31	; 49
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	87 7f       	andi	r24, 0xF7	; 247
    11fe:	8c 93       	st	X, r24
			SET_BIT(GICR,INT1); //ENABLE INT1
    1200:	ab e5       	ldi	r26, 0x5B	; 91
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	eb e5       	ldi	r30, 0x5B	; 91
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	8c 93       	st	X, r24
    120e:	23 c0       	rjmp	.+70     	; 0x1256 <EXTI_enable+0x1da>
			break;
		case EXTI_INT2 :
			if(EXTI_RISING_EDGE == interruptTriggerEdge)
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	88 23       	and	r24, r24
    1214:	41 f4       	brne	.+16     	; 0x1226 <EXTI_enable+0x1aa>
			{
				SET_BIT(MCUCSR,ISC2);
    1216:	a4 e5       	ldi	r26, 0x54	; 84
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e4 e5       	ldi	r30, 0x54	; 84
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 64       	ori	r24, 0x40	; 64
    1222:	8c 93       	st	X, r24
    1224:	0a c0       	rjmp	.+20     	; 0x123a <EXTI_enable+0x1be>
			}
			else if(EXTI_FALLING_EDGE == interruptTriggerEdge)
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	39 f4       	brne	.+14     	; 0x123a <EXTI_enable+0x1be>
			{
				CLR_BIT(MCUCSR,ISC2);
    122c:	a4 e5       	ldi	r26, 0x54	; 84
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e4 e5       	ldi	r30, 0x54	; 84
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 7b       	andi	r24, 0xBF	; 191
    1238:	8c 93       	st	X, r24
			}
			CLR_BIT(DDRB,2);
    123a:	a7 e3       	ldi	r26, 0x37	; 55
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e7 e3       	ldi	r30, 0x37	; 55
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8b 7f       	andi	r24, 0xFB	; 251
    1246:	8c 93       	st	X, r24
			SET_BIT(GICR,INT2); //ENABLE INT2
    1248:	ab e5       	ldi	r26, 0x5B	; 91
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	eb e5       	ldi	r30, 0x5B	; 91
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 62       	ori	r24, 0x20	; 32
    1254:	8c 93       	st	X, r24
			break;

	}
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <EXTI_disable>:

//Function to Disable the Desired External Interrupt
void EXTI_disable(u8 interruptSource)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <EXTI_disable+0x6>
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	89 83       	std	Y+1, r24	; 0x01
	switch(interruptSource)
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3b 83       	std	Y+3, r19	; 0x03
    127a:	2a 83       	std	Y+2, r18	; 0x02
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	89 f0       	breq	.+34     	; 0x12a8 <EXTI_disable+0x44>
    1286:	2a 81       	ldd	r18, Y+2	; 0x02
    1288:	3b 81       	ldd	r19, Y+3	; 0x03
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	a1 f0       	breq	.+40     	; 0x12b8 <EXTI_disable+0x54>
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	9b 81       	ldd	r25, Y+3	; 0x03
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	b9 f4       	brne	.+46     	; 0x12c6 <EXTI_disable+0x62>
	{
		case EXTI_INT0 :
			CLR_BIT(GICR,INT0);
    1298:	ab e5       	ldi	r26, 0x5B	; 91
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	eb e5       	ldi	r30, 0x5B	; 91
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 7b       	andi	r24, 0xBF	; 191
    12a4:	8c 93       	st	X, r24
    12a6:	0f c0       	rjmp	.+30     	; 0x12c6 <EXTI_disable+0x62>
			break;
		case EXTI_INT1 :
			CLR_BIT(GICR,INT1);
    12a8:	ab e5       	ldi	r26, 0x5B	; 91
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	eb e5       	ldi	r30, 0x5B	; 91
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 77       	andi	r24, 0x7F	; 127
    12b4:	8c 93       	st	X, r24
    12b6:	07 c0       	rjmp	.+14     	; 0x12c6 <EXTI_disable+0x62>
			break;
		case EXTI_INT2 :
			CLR_BIT(GICR,INT2);
    12b8:	ab e5       	ldi	r26, 0x5B	; 91
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	eb e5       	ldi	r30, 0x5B	; 91
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8f 7d       	andi	r24, 0xDF	; 223
    12c4:	8c 93       	st	X, r24
			break;
	}
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <DIO_setPinDirection>:
/* MCAL */
#include "DIO_interface.h"

//Function to set the Direction of the Desired Pin
 void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
 {
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <DIO_setPinDirection+0x6>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <DIO_setPinDirection+0x8>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	6a 83       	std	Y+2, r22	; 0x02
    12e4:	4b 83       	std	Y+3, r20	; 0x03
    switch (PortId) //Determining the Port
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3d 83       	std	Y+5, r19	; 0x05
    12ee:	2c 83       	std	Y+4, r18	; 0x04
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	91 05       	cpc	r25, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <DIO_setPinDirection+0x2a>
    12fa:	43 c0       	rjmp	.+134    	; 0x1382 <DIO_setPinDirection+0xb0>
    12fc:	2c 81       	ldd	r18, Y+4	; 0x04
    12fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	31 05       	cpc	r19, r1
    1304:	2c f4       	brge	.+10     	; 0x1310 <DIO_setPinDirection+0x3e>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	71 f0       	breq	.+28     	; 0x132a <DIO_setPinDirection+0x58>
    130e:	bc c0       	rjmp	.+376    	; 0x1488 <DIO_setPinDirection+0x1b6>
    1310:	2c 81       	ldd	r18, Y+4	; 0x04
    1312:	3d 81       	ldd	r19, Y+5	; 0x05
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	09 f4       	brne	.+2      	; 0x131c <DIO_setPinDirection+0x4a>
    131a:	5f c0       	rjmp	.+190    	; 0x13da <DIO_setPinDirection+0x108>
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	91 05       	cpc	r25, r1
    1324:	09 f4       	brne	.+2      	; 0x1328 <DIO_setPinDirection+0x56>
    1326:	85 c0       	rjmp	.+266    	; 0x1432 <DIO_setPinDirection+0x160>
    1328:	af c0       	rjmp	.+350    	; 0x1488 <DIO_setPinDirection+0x1b6>
    {
        case DIO_PORTA:
        if(DIO_PIN_OUTPUT == PinDirection)
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	a1 f4       	brne	.+40     	; 0x1358 <DIO_setPinDirection+0x86>
        {
            SET_BIT(DDRA,PinId);
    1330:	aa e3       	ldi	r26, 0x3A	; 58
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ea e3       	ldi	r30, 0x3A	; 58
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_setPinDirection+0x7c>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_setPinDirection+0x78>
    1352:	84 2b       	or	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	98 c0       	rjmp	.+304    	; 0x1488 <DIO_setPinDirection+0x1b6>
        }
        else
        {
            CLR_BIT(DDRA,PinId);
    1358:	aa e3       	ldi	r26, 0x3A	; 58
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ea e3       	ldi	r30, 0x3A	; 58
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_setPinDirection+0xa4>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_setPinDirection+0xa0>
    137a:	80 95       	com	r24
    137c:	84 23       	and	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	83 c0       	rjmp	.+262    	; 0x1488 <DIO_setPinDirection+0x1b6>
        }
        break;
        case DIO_PORTB:
        if(DIO_PIN_OUTPUT == PinDirection)
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <DIO_setPinDirection+0xde>
        {
            SET_BIT(DDRB,PinId);
    1388:	a7 e3       	ldi	r26, 0x37	; 55
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e7 e3       	ldi	r30, 0x37	; 55
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_setPinDirection+0xd4>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_setPinDirection+0xd0>
    13aa:	84 2b       	or	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	6c c0       	rjmp	.+216    	; 0x1488 <DIO_setPinDirection+0x1b6>
        }
        else
        {
            CLR_BIT(DDRB,PinId);
    13b0:	a7 e3       	ldi	r26, 0x37	; 55
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e7 e3       	ldi	r30, 0x37	; 55
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_setPinDirection+0xfc>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_setPinDirection+0xf8>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	57 c0       	rjmp	.+174    	; 0x1488 <DIO_setPinDirection+0x1b6>
        }
        break;
        case DIO_PORTC:
        if(DIO_PIN_OUTPUT == PinDirection)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	a1 f4       	brne	.+40     	; 0x1408 <DIO_setPinDirection+0x136>
        {
            SET_BIT(DDRC,PinId);
    13e0:	a4 e3       	ldi	r26, 0x34	; 52
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e4 e3       	ldi	r30, 0x34	; 52
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_setPinDirection+0x12c>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_setPinDirection+0x128>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	40 c0       	rjmp	.+128    	; 0x1488 <DIO_setPinDirection+0x1b6>
        }
        else
        {
            CLR_BIT(DDRC,PinId);
    1408:	a4 e3       	ldi	r26, 0x34	; 52
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e4 e3       	ldi	r30, 0x34	; 52
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_setPinDirection+0x154>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_setPinDirection+0x150>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	2b c0       	rjmp	.+86     	; 0x1488 <DIO_setPinDirection+0x1b6>
        }
        break;
        case DIO_PORTD:
        if(DIO_PIN_OUTPUT == PinDirection)
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	a1 f4       	brne	.+40     	; 0x1460 <DIO_setPinDirection+0x18e>
        {
            SET_BIT(DDRD,PinId);
    1438:	a1 e3       	ldi	r26, 0x31	; 49
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e1 e3       	ldi	r30, 0x31	; 49
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_setPinDirection+0x184>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_setPinDirection+0x180>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <DIO_setPinDirection+0x1b6>
        }
        else
        {
            CLR_BIT(DDRD,PinId);
    1460:	a1 e3       	ldi	r26, 0x31	; 49
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e1 e3       	ldi	r30, 0x31	; 49
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_setPinDirection+0x1ac>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_setPinDirection+0x1a8>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
        }
        break;
    }
 }
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <DIO_setPinValue>:

 //Function to set the Value of the Desired Pin HIGH or LOW
 void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
 {
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <DIO_setPinValue+0x6>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <DIO_setPinValue+0x8>
    14a0:	0f 92       	push	r0
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	6a 83       	std	Y+2, r22	; 0x02
    14aa:	4b 83       	std	Y+3, r20	; 0x03
    switch(PortId) //Determining the Port
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	3d 83       	std	Y+5, r19	; 0x05
    14b4:	2c 83       	std	Y+4, r18	; 0x04
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	91 05       	cpc	r25, r1
    14be:	09 f4       	brne	.+2      	; 0x14c2 <DIO_setPinValue+0x2a>
    14c0:	43 c0       	rjmp	.+134    	; 0x1548 <DIO_setPinValue+0xb0>
    14c2:	2c 81       	ldd	r18, Y+4	; 0x04
    14c4:	3d 81       	ldd	r19, Y+5	; 0x05
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	2c f4       	brge	.+10     	; 0x14d6 <DIO_setPinValue+0x3e>
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	9d 81       	ldd	r25, Y+5	; 0x05
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	71 f0       	breq	.+28     	; 0x14f0 <DIO_setPinValue+0x58>
    14d4:	bc c0       	rjmp	.+376    	; 0x164e <DIO_setPinValue+0x1b6>
    14d6:	2c 81       	ldd	r18, Y+4	; 0x04
    14d8:	3d 81       	ldd	r19, Y+5	; 0x05
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <DIO_setPinValue+0x4a>
    14e0:	5f c0       	rjmp	.+190    	; 0x15a0 <DIO_setPinValue+0x108>
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <DIO_setPinValue+0x56>
    14ec:	85 c0       	rjmp	.+266    	; 0x15f8 <DIO_setPinValue+0x160>
    14ee:	af c0       	rjmp	.+350    	; 0x164e <DIO_setPinValue+0x1b6>
    {
        case DIO_PORTA:
        if(DIO_PIN_HIGH == PinValue)
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	a1 f4       	brne	.+40     	; 0x151e <DIO_setPinValue+0x86>
        {
            SET_BIT(PORTA,PinId);
    14f6:	ab e3       	ldi	r26, 0x3B	; 59
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	eb e3       	ldi	r30, 0x3B	; 59
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_setPinValue+0x7c>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_setPinValue+0x78>
    1518:	84 2b       	or	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	98 c0       	rjmp	.+304    	; 0x164e <DIO_setPinValue+0x1b6>
        }
        else
        {
            CLR_BIT(PORTA,PinId);
    151e:	ab e3       	ldi	r26, 0x3B	; 59
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	eb e3       	ldi	r30, 0x3B	; 59
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_setPinValue+0xa4>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_setPinValue+0xa0>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	83 c0       	rjmp	.+262    	; 0x164e <DIO_setPinValue+0x1b6>
        }
        break;
        case DIO_PORTB:
        if(DIO_PIN_HIGH == PinValue)
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	a1 f4       	brne	.+40     	; 0x1576 <DIO_setPinValue+0xde>
        {
            SET_BIT(PORTB,PinId);
    154e:	a8 e3       	ldi	r26, 0x38	; 56
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_setPinValue+0xd4>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_setPinValue+0xd0>
    1570:	84 2b       	or	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	6c c0       	rjmp	.+216    	; 0x164e <DIO_setPinValue+0x1b6>
        }
        else
        {
            CLR_BIT(PORTB,PinId);
    1576:	a8 e3       	ldi	r26, 0x38	; 56
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e8 e3       	ldi	r30, 0x38	; 56
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <DIO_setPinValue+0xfc>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <DIO_setPinValue+0xf8>
    1598:	80 95       	com	r24
    159a:	84 23       	and	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	57 c0       	rjmp	.+174    	; 0x164e <DIO_setPinValue+0x1b6>
        }
        break;
        case DIO_PORTC:
        if(DIO_PIN_HIGH == PinValue)
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	a1 f4       	brne	.+40     	; 0x15ce <DIO_setPinValue+0x136>
        {
            SET_BIT(PORTC,PinId);
    15a6:	a5 e3       	ldi	r26, 0x35	; 53
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e5 e3       	ldi	r30, 0x35	; 53
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_setPinValue+0x12c>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_setPinValue+0x128>
    15c8:	84 2b       	or	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	40 c0       	rjmp	.+128    	; 0x164e <DIO_setPinValue+0x1b6>
        }
        else
        {
            CLR_BIT(PORTC,PinId);
    15ce:	a5 e3       	ldi	r26, 0x35	; 53
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e5 e3       	ldi	r30, 0x35	; 53
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_setPinValue+0x154>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_setPinValue+0x150>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	2b c0       	rjmp	.+86     	; 0x164e <DIO_setPinValue+0x1b6>
        }
        break;
        case DIO_PORTD:
        if(DIO_PIN_HIGH == PinValue)
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	a1 f4       	brne	.+40     	; 0x1626 <DIO_setPinValue+0x18e>
        {
            SET_BIT(PORTD,PinId);
    15fe:	a2 e3       	ldi	r26, 0x32	; 50
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e2 e3       	ldi	r30, 0x32	; 50
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_setPinValue+0x184>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_setPinValue+0x180>
    1620:	84 2b       	or	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	14 c0       	rjmp	.+40     	; 0x164e <DIO_setPinValue+0x1b6>
        }
        else
        {
            CLR_BIT(PORTD,PinId);
    1626:	a2 e3       	ldi	r26, 0x32	; 50
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e2 e3       	ldi	r30, 0x32	; 50
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_setPinValue+0x1ac>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_setPinValue+0x1a8>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
        }
        break;
    }
 }
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <DIO_getPinValue>:

 //Function to get the Value of the Desired Pin HIGH or LOW
 void DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
 {
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <DIO_getPinValue+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <DIO_getPinValue+0x8>
    1666:	00 d0       	rcall	.+0      	; 0x1668 <DIO_getPinValue+0xa>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	6a 83       	std	Y+2, r22	; 0x02
    1670:	5c 83       	std	Y+4, r21	; 0x04
    1672:	4b 83       	std	Y+3, r20	; 0x03
    switch(PortId) //Determining the Port
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3e 83       	std	Y+6, r19	; 0x06
    167c:	2d 83       	std	Y+5, r18	; 0x05
    167e:	4d 81       	ldd	r20, Y+5	; 0x05
    1680:	5e 81       	ldd	r21, Y+6	; 0x06
    1682:	41 30       	cpi	r20, 0x01	; 1
    1684:	51 05       	cpc	r21, r1
    1686:	59 f1       	breq	.+86     	; 0x16de <DIO_getPinValue+0x80>
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	91 05       	cpc	r25, r1
    1690:	34 f4       	brge	.+12     	; 0x169e <DIO_getPinValue+0x40>
    1692:	2d 81       	ldd	r18, Y+5	; 0x05
    1694:	3e 81       	ldd	r19, Y+6	; 0x06
    1696:	21 15       	cp	r18, r1
    1698:	31 05       	cpc	r19, r1
    169a:	69 f0       	breq	.+26     	; 0x16b6 <DIO_getPinValue+0x58>
    169c:	5b c0       	rjmp	.+182    	; 0x1754 <DIO_getPinValue+0xf6>
    169e:	4d 81       	ldd	r20, Y+5	; 0x05
    16a0:	5e 81       	ldd	r21, Y+6	; 0x06
    16a2:	42 30       	cpi	r20, 0x02	; 2
    16a4:	51 05       	cpc	r21, r1
    16a6:	79 f1       	breq	.+94     	; 0x1706 <DIO_getPinValue+0xa8>
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	83 30       	cpi	r24, 0x03	; 3
    16ae:	91 05       	cpc	r25, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <DIO_getPinValue+0x56>
    16b2:	3d c0       	rjmp	.+122    	; 0x172e <DIO_getPinValue+0xd0>
    16b4:	4f c0       	rjmp	.+158    	; 0x1754 <DIO_getPinValue+0xf6>
    {
        case DIO_PORTA:
        *PinValue = GET_BIT(PINA,PinId);
    16b6:	e9 e3       	ldi	r30, 0x39	; 57
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	a9 01       	movw	r20, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_getPinValue+0x70>
    16ca:	55 95       	asr	r21
    16cc:	47 95       	ror	r20
    16ce:	8a 95       	dec	r24
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_getPinValue+0x6c>
    16d2:	ca 01       	movw	r24, r20
    16d4:	81 70       	andi	r24, 0x01	; 1
    16d6:	eb 81       	ldd	r30, Y+3	; 0x03
    16d8:	fc 81       	ldd	r31, Y+4	; 0x04
    16da:	80 83       	st	Z, r24
    16dc:	3b c0       	rjmp	.+118    	; 0x1754 <DIO_getPinValue+0xf6>
        break;
        case DIO_PORTB:
        *PinValue = GET_BIT(PINB,PinId);
    16de:	e6 e3       	ldi	r30, 0x36	; 54
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	a9 01       	movw	r20, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_getPinValue+0x98>
    16f2:	55 95       	asr	r21
    16f4:	47 95       	ror	r20
    16f6:	8a 95       	dec	r24
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_getPinValue+0x94>
    16fa:	ca 01       	movw	r24, r20
    16fc:	81 70       	andi	r24, 0x01	; 1
    16fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1700:	fc 81       	ldd	r31, Y+4	; 0x04
    1702:	80 83       	st	Z, r24
    1704:	27 c0       	rjmp	.+78     	; 0x1754 <DIO_getPinValue+0xf6>
        break;
        case DIO_PORTC:
        *PinValue = GET_BIT(PINC,PinId);
    1706:	e3 e3       	ldi	r30, 0x33	; 51
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a9 01       	movw	r20, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_getPinValue+0xc0>
    171a:	55 95       	asr	r21
    171c:	47 95       	ror	r20
    171e:	8a 95       	dec	r24
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_getPinValue+0xbc>
    1722:	ca 01       	movw	r24, r20
    1724:	81 70       	andi	r24, 0x01	; 1
    1726:	eb 81       	ldd	r30, Y+3	; 0x03
    1728:	fc 81       	ldd	r31, Y+4	; 0x04
    172a:	80 83       	st	Z, r24
    172c:	13 c0       	rjmp	.+38     	; 0x1754 <DIO_getPinValue+0xf6>
        break;
        case DIO_PORTD:
        *PinValue = GET_BIT(PIND,PinId);
    172e:	e0 e3       	ldi	r30, 0x30	; 48
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a9 01       	movw	r20, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_getPinValue+0xe8>
    1742:	55 95       	asr	r21
    1744:	47 95       	ror	r20
    1746:	8a 95       	dec	r24
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_getPinValue+0xe4>
    174a:	ca 01       	movw	r24, r20
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	eb 81       	ldd	r30, Y+3	; 0x03
    1750:	fc 81       	ldd	r31, Y+4	; 0x04
    1752:	80 83       	st	Z, r24
        break;
    }
 }
    1754:	26 96       	adiw	r28, 0x06	; 6
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <DIO_togglePinValue>:

 //Function to toggle the Value of the Desired Pin
 void DIO_togglePinValue(u8 PortId, u8 PinId)
 {
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <DIO_togglePinValue+0x6>
    176c:	00 d0       	rcall	.+0      	; 0x176e <DIO_togglePinValue+0x8>
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	6a 83       	std	Y+2, r22	; 0x02
    switch(PortId) //Determining the Port
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	3c 83       	std	Y+4, r19	; 0x04
    177e:	2b 83       	std	Y+3, r18	; 0x03
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	49 f1       	breq	.+82     	; 0x17dc <DIO_togglePinValue+0x76>
    178a:	2b 81       	ldd	r18, Y+3	; 0x03
    178c:	3c 81       	ldd	r19, Y+4	; 0x04
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	2c f4       	brge	.+10     	; 0x179e <DIO_togglePinValue+0x38>
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	61 f0       	breq	.+24     	; 0x17b4 <DIO_togglePinValue+0x4e>
    179c:	5a c0       	rjmp	.+180    	; 0x1852 <DIO_togglePinValue+0xec>
    179e:	2b 81       	ldd	r18, Y+3	; 0x03
    17a0:	3c 81       	ldd	r19, Y+4	; 0x04
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	71 f1       	breq	.+92     	; 0x1804 <DIO_togglePinValue+0x9e>
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	e9 f1       	breq	.+122    	; 0x182c <DIO_togglePinValue+0xc6>
    17b2:	4f c0       	rjmp	.+158    	; 0x1852 <DIO_togglePinValue+0xec>
    {
        case DIO_PORTA:
        TOG_BIT(PORTA,PinId);
    17b4:	ab e3       	ldi	r26, 0x3B	; 59
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	eb e3       	ldi	r30, 0x3B	; 59
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_togglePinValue+0x6c>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_togglePinValue+0x68>
    17d6:	84 27       	eor	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	3b c0       	rjmp	.+118    	; 0x1852 <DIO_togglePinValue+0xec>
        break;
        case DIO_PORTB:
        TOG_BIT(PORTB,PinId);
    17dc:	a8 e3       	ldi	r26, 0x38	; 56
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e8 e3       	ldi	r30, 0x38	; 56
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_togglePinValue+0x94>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_togglePinValue+0x90>
    17fe:	84 27       	eor	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	27 c0       	rjmp	.+78     	; 0x1852 <DIO_togglePinValue+0xec>
        break;
        case DIO_PORTC:
        TOG_BIT(PORTC,PinId);
    1804:	a5 e3       	ldi	r26, 0x35	; 53
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e5 e3       	ldi	r30, 0x35	; 53
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	02 2e       	mov	r0, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_togglePinValue+0xbc>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_togglePinValue+0xb8>
    1826:	84 27       	eor	r24, r20
    1828:	8c 93       	st	X, r24
    182a:	13 c0       	rjmp	.+38     	; 0x1852 <DIO_togglePinValue+0xec>
        break;
        case DIO_PORTD:
        TOG_BIT(PORTD,PinId);
    182c:	a2 e3       	ldi	r26, 0x32	; 50
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e2 e3       	ldi	r30, 0x32	; 50
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 2e       	mov	r0, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <DIO_togglePinValue+0xe4>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	0a 94       	dec	r0
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <DIO_togglePinValue+0xe0>
    184e:	84 27       	eor	r24, r20
    1850:	8c 93       	st	X, r24
        break;
    }
 }
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <DIO_activeInPullUpResistance>:

//Function to activate the internal pull-up resistor of a desired pin in a specific port.
 void DIO_activeInPullUpResistance(u8 PortId, u8 PinId)
 {
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <DIO_activeInPullUpResistance+0x6>
    1866:	00 d0       	rcall	.+0      	; 0x1868 <DIO_activeInPullUpResistance+0x8>
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	6a 83       	std	Y+2, r22	; 0x02
   switch(PortId) //Determining the Port
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	3c 83       	std	Y+4, r19	; 0x04
    1878:	2b 83       	std	Y+3, r18	; 0x03
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	91 05       	cpc	r25, r1
    1882:	49 f1       	breq	.+82     	; 0x18d6 <DIO_activeInPullUpResistance+0x76>
    1884:	2b 81       	ldd	r18, Y+3	; 0x03
    1886:	3c 81       	ldd	r19, Y+4	; 0x04
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	2c f4       	brge	.+10     	; 0x1898 <DIO_activeInPullUpResistance+0x38>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	61 f0       	breq	.+24     	; 0x18ae <DIO_activeInPullUpResistance+0x4e>
    1896:	5a c0       	rjmp	.+180    	; 0x194c <DIO_activeInPullUpResistance+0xec>
    1898:	2b 81       	ldd	r18, Y+3	; 0x03
    189a:	3c 81       	ldd	r19, Y+4	; 0x04
    189c:	22 30       	cpi	r18, 0x02	; 2
    189e:	31 05       	cpc	r19, r1
    18a0:	71 f1       	breq	.+92     	; 0x18fe <DIO_activeInPullUpResistance+0x9e>
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	83 30       	cpi	r24, 0x03	; 3
    18a8:	91 05       	cpc	r25, r1
    18aa:	e9 f1       	breq	.+122    	; 0x1926 <DIO_activeInPullUpResistance+0xc6>
    18ac:	4f c0       	rjmp	.+158    	; 0x194c <DIO_activeInPullUpResistance+0xec>
   {
       case DIO_PORTA:
       SET_BIT(PORTA,PinId);
    18ae:	ab e3       	ldi	r26, 0x3B	; 59
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	eb e3       	ldi	r30, 0x3B	; 59
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_activeInPullUpResistance+0x6c>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_activeInPullUpResistance+0x68>
    18d0:	84 2b       	or	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	3b c0       	rjmp	.+118    	; 0x194c <DIO_activeInPullUpResistance+0xec>
       break;
       case DIO_PORTB:
       SET_BIT(PORTB,PinId);
    18d6:	a8 e3       	ldi	r26, 0x38	; 56
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e8 e3       	ldi	r30, 0x38	; 56
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_activeInPullUpResistance+0x94>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_activeInPullUpResistance+0x90>
    18f8:	84 2b       	or	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	27 c0       	rjmp	.+78     	; 0x194c <DIO_activeInPullUpResistance+0xec>
       break;
       case DIO_PORTC:
       SET_BIT(PORTC,PinId);
    18fe:	a5 e3       	ldi	r26, 0x35	; 53
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e5 e3       	ldi	r30, 0x35	; 53
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 2e       	mov	r0, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <DIO_activeInPullUpResistance+0xbc>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <DIO_activeInPullUpResistance+0xb8>
    1920:	84 2b       	or	r24, r20
    1922:	8c 93       	st	X, r24
    1924:	13 c0       	rjmp	.+38     	; 0x194c <DIO_activeInPullUpResistance+0xec>
       break;
       case DIO_PORTD:
       SET_BIT(PORTD,PinId);
    1926:	a2 e3       	ldi	r26, 0x32	; 50
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e2 e3       	ldi	r30, 0x32	; 50
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <DIO_activeInPullUpResistance+0xe4>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <DIO_activeInPullUpResistance+0xe0>
    1948:	84 2b       	or	r24, r20
    194a:	8c 93       	st	X, r24
       break;
   }
 }
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <ADC_init>:
/* MCAL */
#include "ADC_interface.h"

//Function to initialize ADC
void ADC_init(void)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	//V REF = Vcc
	SET_BIT(ADMUX,REFS0);
    1962:	a7 e2       	ldi	r26, 0x27	; 39
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e7 e2       	ldi	r30, 0x27	; 39
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	80 64       	ori	r24, 0x40	; 64
    196e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    1970:	a7 e2       	ldi	r26, 0x27	; 39
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e7 e2       	ldi	r30, 0x27	; 39
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	8f 77       	andi	r24, 0x7F	; 127
    197c:	8c 93       	st	X, r24

	//RIGHT ADJUSTMENT
	CLR_BIT(ADMUX,ADLAR);
    197e:	a7 e2       	ldi	r26, 0x27	; 39
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e7 e2       	ldi	r30, 0x27	; 39
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8f 7d       	andi	r24, 0xDF	; 223
    198a:	8c 93       	st	X, r24

	//SINGLE CONVERSION
	CLR_BIT(ADCSRA,ADC_Trigger_Enable);
    198c:	a6 e2       	ldi	r26, 0x26	; 38
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e6 e2       	ldi	r30, 0x26	; 38
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 7d       	andi	r24, 0xDF	; 223
    1998:	8c 93       	st	X, r24

	//PRESCALER 128
	SET_BIT(ADCSRA,ADPS0);
    199a:	a6 e2       	ldi	r26, 0x26	; 38
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e6 e2       	ldi	r30, 0x26	; 38
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	81 60       	ori	r24, 0x01	; 1
    19a6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    19a8:	a6 e2       	ldi	r26, 0x26	; 38
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e6 e2       	ldi	r30, 0x26	; 38
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	82 60       	ori	r24, 0x02	; 2
    19b4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
    19b6:	a6 e2       	ldi	r26, 0x26	; 38
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e6 e2       	ldi	r30, 0x26	; 38
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	84 60       	ori	r24, 0x04	; 4
    19c2:	8c 93       	st	X, r24

	//ENABLE ADC
	SET_BIT(ADCSRA,ADC_Enable);
    19c4:	a6 e2       	ldi	r26, 0x26	; 38
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e6 e2       	ldi	r30, 0x26	; 38
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	80 68       	ori	r24, 0x80	; 128
    19d0:	8c 93       	st	X, r24
}
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <ADC_getDigitalValue>:

//Function to read the value from the specified channel and store it in the provided variable
void ADC_getDigitalValue(u8 channelNum,u16* digitalValue)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <ADC_getDigitalValue+0x6>
    19de:	0f 92       	push	r0
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	7b 83       	std	Y+3, r23	; 0x03
    19e8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check :
	 * if The Number in the Valid Range
	 * Digital Value Pointer is not NULL
	 */
	if((channelNum < 32) && (digitalValue != NULL))
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	80 32       	cpi	r24, 0x20	; 32
    19ee:	a0 f5       	brcc	.+104    	; 0x1a58 <ADC_getDigitalValue+0x80>
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	9b 81       	ldd	r25, Y+3	; 0x03
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	81 f1       	breq	.+96     	; 0x1a58 <ADC_getDigitalValue+0x80>
	{
		//Clear ADMUX Channel Bits 
		ADMUX &= 0b11100000;
    19f8:	a7 e2       	ldi	r26, 0x27	; 39
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e7 e2       	ldi	r30, 0x27	; 39
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	80 7e       	andi	r24, 0xE0	; 224
    1a04:	8c 93       	st	X, r24

		//Select Channel Number
		ADMUX |= channelNum;
    1a06:	a7 e2       	ldi	r26, 0x27	; 39
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e7 e2       	ldi	r30, 0x27	; 39
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	90 81       	ld	r25, Z
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	89 2b       	or	r24, r25
    1a14:	8c 93       	st	X, r24

		//Start Conversion 
		SET_BIT(ADCSRA,ADC_Start_Conv);
    1a16:	a6 e2       	ldi	r26, 0x26	; 38
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e6 e2       	ldi	r30, 0x26	; 38
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 64       	ori	r24, 0x40	; 64
    1a22:	8c 93       	st	X, r24

		//Wait for the conversion to complete
		while(0 == GET_BIT(ADCSRA,ADC_Flag));
    1a24:	e6 e2       	ldi	r30, 0x26	; 38
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	82 95       	swap	r24
    1a2c:	8f 70       	andi	r24, 0x0F	; 15
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	81 70       	andi	r24, 0x01	; 1
    1a34:	90 70       	andi	r25, 0x00	; 0
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	a9 f3       	breq	.-22     	; 0x1a24 <ADC_getDigitalValue+0x4c>

		//Clear Flag
		SET_BIT(ADCSRA,ADC_Flag);
    1a3a:	a6 e2       	ldi	r26, 0x26	; 38
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e6 e2       	ldi	r30, 0x26	; 38
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	80 61       	ori	r24, 0x10	; 16
    1a46:	8c 93       	st	X, r24

		//Read Digital Value from ADC Register
		*digitalValue = ADC_u16;
    1a48:	e4 e2       	ldi	r30, 0x24	; 36
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	ea 81       	ldd	r30, Y+2	; 0x02
    1a52:	fb 81       	ldd	r31, Y+3	; 0x03
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24

	}

}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <SSD_init>:
#include "SSD_interface.h"
#include "SSD_Config.h"

//Function to initialize the Two SSDs by setting their pins as Output
void SSD_init(void)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	//SSD 1 pins
    DIO_setPinDirection(SSDPort1,DIO_PIN0,DIO_PIN_OUTPUT);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
    DIO_setPinDirection(SSDPort1,DIO_PIN1,DIO_PIN_OUTPUT);
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	61 e0       	ldi	r22, 0x01	; 1
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
    DIO_setPinDirection(SSDPort1,DIO_PIN2,DIO_PIN_OUTPUT);
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	62 e0       	ldi	r22, 0x02	; 2
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
    DIO_setPinDirection(SSDPort1,DIO_PIN3,DIO_PIN_OUTPUT);
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	63 e0       	ldi	r22, 0x03	; 3
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>

    //SSD 2 pins
    DIO_setPinDirection(SSDPort2,DIO_PIN4,DIO_PIN_OUTPUT);
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	64 e0       	ldi	r22, 0x04	; 4
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
    DIO_setPinDirection(SSDPort2,DIO_PIN5,DIO_PIN_OUTPUT);
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	65 e0       	ldi	r22, 0x05	; 5
    1aa2:	41 e0       	ldi	r20, 0x01	; 1
    1aa4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
    DIO_setPinDirection(SSDPort2,DIO_PIN6,DIO_PIN_OUTPUT);
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	66 e0       	ldi	r22, 0x06	; 6
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
    DIO_setPinDirection(SSDPort2,DIO_PIN7,DIO_PIN_OUTPUT);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	67 e0       	ldi	r22, 0x07	; 7
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>

    //Enable Pins
    DIO_setPinDirection(SSDPort1,DIO_PIN6,DIO_PIN_OUTPUT);
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	66 e0       	ldi	r22, 0x06	; 6
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
    DIO_setPinDirection(SSDPort2,DIO_PIN1,DIO_PIN_OUTPUT);
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
}
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <SSD_ON>:

//Function to Turn SSDs ON
void SSD_ON(void)
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(SSDPort1,DIO_PIN6,DIO_PIN_HIGH);
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	66 e0       	ldi	r22, 0x06	; 6
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
	DIO_setPinValue(SSDPort2,DIO_PIN1,DIO_PIN_HIGH);
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	41 e0       	ldi	r20, 0x01	; 1
    1aee:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
}
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <SSD_OFF>:

//Function to Turn SSDs OFF
void SSD_OFF(void)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(SSDPort1,DIO_PIN6,DIO_PIN_LOW);
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	66 e0       	ldi	r22, 0x06	; 6
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
	DIO_setPinValue(SSDPort2,DIO_PIN1,DIO_PIN_LOW);
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
}
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <SSD_displayNumber>:

//Function To Display a Number on the SSD
void SSD_displayNumber(u8 ssdID,u8 desiredNumber)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <SSD_displayNumber+0x6>
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <SSD_displayNumber+0x8>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	6a 83       	std	Y+2, r22	; 0x02
    switch (ssdID)
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	3c 83       	std	Y+4, r19	; 0x04
    1b32:	2b 83       	std	Y+3, r18	; 0x03
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	31 f0       	breq	.+12     	; 0x1b4a <SSD_displayNumber+0x30>
    1b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b40:	3c 81       	ldd	r19, Y+4	; 0x04
    1b42:	22 30       	cpi	r18, 0x02	; 2
    1b44:	31 05       	cpc	r19, r1
    1b46:	69 f0       	breq	.+26     	; 0x1b62 <SSD_displayNumber+0x48>
    1b48:	1e c0       	rjmp	.+60     	; 0x1b86 <SSD_displayNumber+0x6c>
    {
    case SSD_ONE:

        SSDPortOUT1 = (SSDPortOUT1 & (0xF0)) | ( desiredNumber & ~(0xF0));
    1b4a:	ab e3       	ldi	r26, 0x3B	; 59
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	eb e3       	ldi	r30, 0x3B	; 59
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	98 2f       	mov	r25, r24
    1b56:	90 7f       	andi	r25, 0xF0	; 240
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	8f 70       	andi	r24, 0x0F	; 15
    1b5c:	89 2b       	or	r24, r25
    1b5e:	8c 93       	st	X, r24
    1b60:	12 c0       	rjmp	.+36     	; 0x1b86 <SSD_displayNumber+0x6c>
        break;
    
    case SSD_TWO:

    	SSDPortOUT2 = (SSDPortOUT2 & 0x0F) | ((desiredNumber << 4) & 0xF0);
    1b62:	a8 e3       	ldi	r26, 0x38	; 56
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e8 e3       	ldi	r30, 0x38	; 56
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	2f 70       	andi	r18, 0x0F	; 15
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	82 95       	swap	r24
    1b78:	92 95       	swap	r25
    1b7a:	90 7f       	andi	r25, 0xF0	; 240
    1b7c:	98 27       	eor	r25, r24
    1b7e:	80 7f       	andi	r24, 0xF0	; 240
    1b80:	98 27       	eor	r25, r24
    1b82:	82 2b       	or	r24, r18
    1b84:	8c 93       	st	X, r24
        break;
    }

}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <SSD_displayMultibleNum>:

//Function to Display a 2-Digit Number on the SSDs
void SSD_displayMultibleNum(u8 Num)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	0f 92       	push	r0
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	SSD_displayNumber(SSD_ONE,Num/10);
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a e0       	ldi	r25, 0x0A	; 10
    1ba4:	69 2f       	mov	r22, r25
    1ba6:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodqi4>
    1baa:	98 2f       	mov	r25, r24
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	69 2f       	mov	r22, r25
    1bb0:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <SSD_displayNumber>
	SSD_displayNumber(SSD_TWO,Num%10);
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a e0       	ldi	r25, 0x0A	; 10
    1bb8:	69 2f       	mov	r22, r25
    1bba:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodqi4>
    1bbe:	89 2f       	mov	r24, r25
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	69 2f       	mov	r22, r25
    1bc6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <SSD_displayNumber>
}
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <SSD_toggleState>:

//Function to toggle the State of the SSDs
void SSD_toggleState(void)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
	DIO_togglePinValue(SSDPort1,DIO_PIN6);
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	66 e0       	ldi	r22, 0x06	; 6
    1bde:	0e 94 b3 0b 	call	0x1766	; 0x1766 <DIO_togglePinValue>
	DIO_togglePinValue(SSDPort2,DIO_PIN1);
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <DIO_togglePinValue>

}
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <LM35_init>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "LM35_interface.h"

//Function to initialize the Temperature Sensor by setting its pin as Output
void LM35_init(void)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
}
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <LM35_tempSense>:

//Function to obtain the Correct Temperature Value from
void LM35_tempSense(u8* TempValue)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <LM35_tempSense+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <LM35_tempSense+0x8>
    1c10:	0f 92       	push	r0
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	9d 83       	std	Y+5, r25	; 0x05
    1c18:	8c 83       	std	Y+4, r24	; 0x04
	u16 digitalVal;
	u8 analogVal;
	ADC_getDigitalValue(ADC_CHANNEL_4,&digitalVal);
    1c1a:	9e 01       	movw	r18, r28
    1c1c:	2e 5f       	subi	r18, 0xFE	; 254
    1c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c20:	84 e0       	ldi	r24, 0x04	; 4
    1c22:	b9 01       	movw	r22, r18
    1c24:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <ADC_getDigitalValue>

	//Mapping the Values taken from the ADC to compute the correct temperature
	if(digitalVal >= 0 && digitalVal <= 10)
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2c:	8b 30       	cpi	r24, 0x0B	; 11
    1c2e:	91 05       	cpc	r25, r1
    1c30:	30 f4       	brcc	.+12     	; 0x1c3e <LM35_tempSense+0x36>
		analogVal = (digitalVal / 2);
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	9b 81       	ldd	r25, Y+3	; 0x03
    1c36:	96 95       	lsr	r25
    1c38:	87 95       	ror	r24
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	7e c0       	rjmp	.+252    	; 0x1d3a <LM35_tempSense+0x132>
	else if(digitalVal > 10 && digitalVal <= 49)
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	9b 81       	ldd	r25, Y+3	; 0x03
    1c42:	8b 30       	cpi	r24, 0x0B	; 11
    1c44:	91 05       	cpc	r25, r1
    1c46:	60 f0       	brcs	.+24     	; 0x1c60 <LM35_tempSense+0x58>
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4c:	82 33       	cpi	r24, 0x32	; 50
    1c4e:	91 05       	cpc	r25, r1
    1c50:	38 f4       	brcc	.+14     	; 0x1c60 <LM35_tempSense+0x58>
		analogVal = (digitalVal-1) / 2 ;
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	9b 81       	ldd	r25, Y+3	; 0x03
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	96 95       	lsr	r25
    1c5a:	87 95       	ror	r24
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	6d c0       	rjmp	.+218    	; 0x1d3a <LM35_tempSense+0x132>
	else if(digitalVal > 24 && digitalVal <= 86)
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	9b 81       	ldd	r25, Y+3	; 0x03
    1c64:	89 31       	cpi	r24, 0x19	; 25
    1c66:	91 05       	cpc	r25, r1
    1c68:	60 f0       	brcs	.+24     	; 0x1c82 <LM35_tempSense+0x7a>
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6e:	87 35       	cpi	r24, 0x57	; 87
    1c70:	91 05       	cpc	r25, r1
    1c72:	38 f4       	brcc	.+14     	; 0x1c82 <LM35_tempSense+0x7a>
		analogVal = (digitalVal-2) / 2 ;
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	9b 81       	ldd	r25, Y+3	; 0x03
    1c78:	02 97       	sbiw	r24, 0x02	; 2
    1c7a:	96 95       	lsr	r25
    1c7c:	87 95       	ror	r24
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	5c c0       	rjmp	.+184    	; 0x1d3a <LM35_tempSense+0x132>
	else if(digitalVal > 42 && digitalVal <= 125)
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	9b 81       	ldd	r25, Y+3	; 0x03
    1c86:	8b 32       	cpi	r24, 0x2B	; 43
    1c88:	91 05       	cpc	r25, r1
    1c8a:	60 f0       	brcs	.+24     	; 0x1ca4 <LM35_tempSense+0x9c>
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c90:	8e 37       	cpi	r24, 0x7E	; 126
    1c92:	91 05       	cpc	r25, r1
    1c94:	38 f4       	brcc	.+14     	; 0x1ca4 <LM35_tempSense+0x9c>
		analogVal = (digitalVal-3) / 2 ;
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9a:	03 97       	sbiw	r24, 0x03	; 3
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	4b c0       	rjmp	.+150    	; 0x1d3a <LM35_tempSense+0x132>
	else if(digitalVal > 61 && digitalVal <= 164)
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca8:	8e 33       	cpi	r24, 0x3E	; 62
    1caa:	91 05       	cpc	r25, r1
    1cac:	60 f0       	brcs	.+24     	; 0x1cc6 <LM35_tempSense+0xbe>
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb2:	85 3a       	cpi	r24, 0xA5	; 165
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	38 f4       	brcc	.+14     	; 0x1cc6 <LM35_tempSense+0xbe>
		analogVal = (digitalVal-4) / 2 ;
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbc:	04 97       	sbiw	r24, 0x04	; 4
    1cbe:	96 95       	lsr	r25
    1cc0:	87 95       	ror	r24
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	3a c0       	rjmp	.+116    	; 0x1d3a <LM35_tempSense+0x132>
	else if(digitalVal > 80 && digitalVal <= 203)
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cca:	81 35       	cpi	r24, 0x51	; 81
    1ccc:	91 05       	cpc	r25, r1
    1cce:	60 f0       	brcs	.+24     	; 0x1ce8 <LM35_tempSense+0xe0>
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd4:	8c 3c       	cpi	r24, 0xCC	; 204
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	38 f4       	brcc	.+14     	; 0x1ce8 <LM35_tempSense+0xe0>
		analogVal = (digitalVal-5) / 2 ;
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cde:	05 97       	sbiw	r24, 0x05	; 5
    1ce0:	96 95       	lsr	r25
    1ce2:	87 95       	ror	r24
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	29 c0       	rjmp	.+82     	; 0x1d3a <LM35_tempSense+0x132>
	else if(digitalVal > 99 && digitalVal <= 242)
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	9b 81       	ldd	r25, Y+3	; 0x03
    1cec:	84 36       	cpi	r24, 0x64	; 100
    1cee:	91 05       	cpc	r25, r1
    1cf0:	60 f0       	brcs	.+24     	; 0x1d0a <LM35_tempSense+0x102>
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	83 3f       	cpi	r24, 0xF3	; 243
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	38 f4       	brcc	.+14     	; 0x1d0a <LM35_tempSense+0x102>
		analogVal = (digitalVal-6) / 2 ;
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1d00:	06 97       	sbiw	r24, 0x06	; 6
    1d02:	96 95       	lsr	r25
    1d04:	87 95       	ror	r24
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	18 c0       	rjmp	.+48     	; 0x1d3a <LM35_tempSense+0x132>
	else if(digitalVal > 118 && digitalVal <= 281)
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0e:	87 37       	cpi	r24, 0x77	; 119
    1d10:	91 05       	cpc	r25, r1
    1d12:	68 f0       	brcs	.+26     	; 0x1d2e <LM35_tempSense+0x126>
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	9b 81       	ldd	r25, Y+3	; 0x03
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	8a 31       	cpi	r24, 0x1A	; 26
    1d1c:	92 07       	cpc	r25, r18
    1d1e:	38 f4       	brcc	.+14     	; 0x1d2e <LM35_tempSense+0x126>
		analogVal = (digitalVal-7) / 2 ;
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	9b 81       	ldd	r25, Y+3	; 0x03
    1d24:	07 97       	sbiw	r24, 0x07	; 7
    1d26:	96 95       	lsr	r25
    1d28:	87 95       	ror	r24
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	06 c0       	rjmp	.+12     	; 0x1d3a <LM35_tempSense+0x132>
	else
		analogVal = (digitalVal-8) / 2 ;
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	9b 81       	ldd	r25, Y+3	; 0x03
    1d32:	08 97       	sbiw	r24, 0x08	; 8
    1d34:	96 95       	lsr	r25
    1d36:	87 95       	ror	r24
    1d38:	89 83       	std	Y+1, r24	; 0x01

	*TempValue = analogVal; //Correct Temperature
    1d3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	80 83       	st	Z, r24
}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <LED_init>:
/* HAL */
#include "LED_interface.h"

//Function to initialize the LED by setting its pin as Output
void LED_init(void)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDirection(DIO_PORTC,DIO_PIN5,DIO_PIN_OUTPUT);
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	65 e0       	ldi	r22, 0x05	; 5
    1d5e:	41 e0       	ldi	r20, 0x01	; 1
    1d60:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
}
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <LED_on>:

//Function to Turn ON the LED
void LED_on(void)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	65 e0       	ldi	r22, 0x05	; 5
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <LED_off>:

//Function to Turn OFF the LED
void LED_off(void)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
    1d8a:	82 e0       	ldi	r24, 0x02	; 2
    1d8c:	65 e0       	ldi	r22, 0x05	; 5
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <LED_toggle>:

//Function to Toggle the LED
void LED_toggle(void)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
	DIO_togglePinValue(DIO_PORTC,DIO_PIN5);
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	65 e0       	ldi	r22, 0x05	; 5
    1da6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <DIO_togglePinValue>
}
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <HTR_init>:
/* HAL */
#include "HTR_interface.h"

//Function to initialize the Heater by setting its pin as Output
void HTR_init(void)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	67 e0       	ldi	r22, 0x07	; 7
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
}
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <HTR_ON>:

//Function to Turn ON the Heater
void HTR_ON(void)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
    1dd0:	82 e0       	ldi	r24, 0x02	; 2
    1dd2:	67 e0       	ldi	r22, 0x07	; 7
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
}
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <HTR_OFF>:

//Function to Turn OFF the Heater
void HTR_OFF(void)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	67 e0       	ldi	r22, 0x07	; 7
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
}
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <EEPROM_init>:
/* HAL */
#include "EEPROM_interface.h"

//Function to initialize the EEPROM
void EEPROM_init(void)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
	TWI_initMaster();
    1e00:	0e 94 a3 05 	call	0xb46	; 0xb46 <TWI_initMaster>
}
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <EEPROM_writeByte>:

//Function to write data in a specific address in the EEPROM
void EEPROM_writeByte(u16 byteAddress, u8 data)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	62 97       	sbiw	r28, 0x12	; 18
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	99 8b       	std	Y+17, r25	; 0x11
    1e20:	88 8b       	std	Y+16, r24	; 0x10
    1e22:	6a 8b       	std	Y+18, r22	; 0x12
	//Compute the address to be used in the write operation
	u8 address = (EEPROM_FIXED_ADDRESS|(u8)(byteAddress >> 8));
    1e24:	88 89       	ldd	r24, Y+16	; 0x10
    1e26:	99 89       	ldd	r25, Y+17	; 0x11
    1e28:	89 2f       	mov	r24, r25
    1e2a:	99 27       	eor	r25, r25
    1e2c:	80 65       	ori	r24, 0x50	; 80
    1e2e:	8f 87       	std	Y+15, r24	; 0x0f

	//send start condition
	TWI_sendStartCondition();
    1e30:	0e 94 ca 05 	call	0xb94	; 0xb94 <TWI_sendStartCondition>

	//send slave address with write operation
	TWI_sendSlaveAddWithWrite(address);
    1e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e36:	0e 94 27 06 	call	0xc4e	; 0xc4e <TWI_sendSlaveAddWithWrite>

	//send byte address
	TWI_sendMasterDataByte((u8)byteAddress);
    1e3a:	88 89       	ldd	r24, Y+16	; 0x10
    1e3c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TWI_sendMasterDataByte>

	//send byte data
	TWI_sendMasterDataByte(data);
    1e40:	8a 89       	ldd	r24, Y+18	; 0x12
    1e42:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TWI_sendMasterDataByte>

	//send stop condition
	TWI_sendStopCondition();
    1e46:	0e 94 12 06 	call	0xc24	; 0xc24 <TWI_sendStopCondition>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 ea       	ldi	r26, 0xA0	; 160
    1e50:	b0 e4       	ldi	r27, 0x40	; 64
    1e52:	8b 87       	std	Y+11, r24	; 0x0b
    1e54:	9c 87       	std	Y+12, r25	; 0x0c
    1e56:	ad 87       	std	Y+13, r26	; 0x0d
    1e58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	4a e7       	ldi	r20, 0x7A	; 122
    1e68:	55 e4       	ldi	r21, 0x45	; 69
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	8f 83       	std	Y+7, r24	; 0x07
    1e74:	98 87       	std	Y+8, r25	; 0x08
    1e76:	a9 87       	std	Y+9, r26	; 0x09
    1e78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7c:	78 85       	ldd	r23, Y+8	; 0x08
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	5f e3       	ldi	r21, 0x3F	; 63
    1e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	2c f4       	brge	.+10     	; 0x1e9c <EEPROM_writeByte+0x92>
		__ticks = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	9e 83       	std	Y+6, r25	; 0x06
    1e98:	8d 83       	std	Y+5, r24	; 0x05
    1e9a:	3f c0       	rjmp	.+126    	; 0x1f1a <EEPROM_writeByte+0x110>
	else if (__tmp > 65535)
    1e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
    1ea8:	4f e7       	ldi	r20, 0x7F	; 127
    1eaa:	57 e4       	ldi	r21, 0x47	; 71
    1eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb0:	18 16       	cp	r1, r24
    1eb2:	4c f5       	brge	.+82     	; 0x1f06 <EEPROM_writeByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e2       	ldi	r20, 0x20	; 32
    1ec2:	51 e4       	ldi	r21, 0x41	; 65
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	bc 01       	movw	r22, r24
    1ece:	cd 01       	movw	r24, r26
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	0f c0       	rjmp	.+30     	; 0x1efc <EEPROM_writeByte+0xf2>
    1ede:	80 e9       	ldi	r24, 0x90	; 144
    1ee0:	91 e0       	ldi	r25, 0x01	; 1
    1ee2:	9c 83       	std	Y+4, r25	; 0x04
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <EEPROM_writeByte+0xe0>
    1eee:	9c 83       	std	Y+4, r25	; 0x04
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	69 f7       	brne	.-38     	; 0x1ede <EEPROM_writeByte+0xd4>
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <EEPROM_writeByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f06:	6f 81       	ldd	r22, Y+7	; 0x07
    1f08:	78 85       	ldd	r23, Y+8	; 0x08
    1f0a:	89 85       	ldd	r24, Y+9	; 0x09
    1f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <EEPROM_writeByte+0x11c>
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01

	//Delay for 5ms for the EEPROM to complete the write operation
	_delay_ms(5);

}
    1f2e:	62 96       	adiw	r28, 0x12	; 18
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <EEPROM_readByte>:

//Function to read data from a specific address in the EEPROM
u8 EEPROM_readByte(u16 byteAddress)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <EEPROM_readByte+0x6>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <EEPROM_readByte+0x8>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
	u8 returnedData;
	//Compute the address to be used in the read operation
	u8 address = (EEPROM_FIXED_ADDRESS|(u8)(byteAddress >> 8));
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	89 2f       	mov	r24, r25
    1f56:	99 27       	eor	r25, r25
    1f58:	80 65       	ori	r24, 0x50	; 80
    1f5a:	89 83       	std	Y+1, r24	; 0x01

	//send start condition
	TWI_sendStartCondition();
    1f5c:	0e 94 ca 05 	call	0xb94	; 0xb94 <TWI_sendStartCondition>

	//send slave address with write operation
	TWI_sendSlaveAddWithWrite(address);
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	0e 94 27 06 	call	0xc4e	; 0xc4e <TWI_sendSlaveAddWithWrite>

	//send byte address
	TWI_sendMasterDataByte((u8)byteAddress);
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TWI_sendMasterDataByte>

	//send repeat start condition
	TWI_sendRepStartCondition();
    1f6c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <TWI_sendRepStartCondition>

	//send slave add with read operation
	TWI_sendSlaveAddWithRead(address);
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TWI_sendSlaveAddWithRead>

	//receive data
	returnedData = WI_recieveMasterDataByte();
    1f76:	0e 94 b1 06 	call	0xd62	; 0xd62 <WI_recieveMasterDataByte>
    1f7a:	8a 83       	std	Y+2, r24	; 0x02

	//send stop condition
	TWI_sendStopCondition();
    1f7c:	0e 94 12 06 	call	0xc24	; 0xc24 <TWI_sendStopCondition>

	return returnedData;
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <DCM_init>:
/* HAL */
#include "DCM_interface.h"

//Function to initialize DC motor pins
void DCM_init(void)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
	//Set the direction of the motor pins as output
	DIO_setPinDirection(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	63 e0       	ldi	r22, 0x03	; 3
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	64 e0       	ldi	r22, 0x04	; 4
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_setPinDirection>


}
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <DCM_on>:

//Function to turn on the DC motor in the specified direction
void DCM_on(u8 motorDirection)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	0f 92       	push	r0
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	89 83       	std	Y+1, r24	; 0x01
	if(CW == motorDirection) // Direction is clockwise
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	81 30       	cpi	r24, 0x01	; 1
    1fc2:	59 f4       	brne	.+22     	; 0x1fda <DCM_on+0x28>
	{
		DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
    1fc6:	63 e0       	ldi	r22, 0x03	; 3
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	64 e0       	ldi	r22, 0x04	; 4
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
    1fd8:	0a c0       	rjmp	.+20     	; 0x1fee <DCM_on+0x3c>
	}
	else // Direction is counter clockwise
	{
		DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	63 e0       	ldi	r22, 0x03	; 3
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	64 e0       	ldi	r22, 0x04	; 4
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
	}
}
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <DCM_ctrlSpeed>:

//Function to control the speed of the DC motor
void DCM_ctrlSpeed(u8 motorSpeed)
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	89 83       	std	Y+1, r24	; 0x01
	// Calculate the compare match value for Timer1 using the input Duty Cycle
	TMR1_setCompareMatchValueA((motorSpeed * (4999 + 1))/100);
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	88 e8       	ldi	r24, 0x88	; 136
    200a:	93 e1       	ldi	r25, 0x13	; 19
    200c:	ac 01       	movw	r20, r24
    200e:	24 9f       	mul	r18, r20
    2010:	c0 01       	movw	r24, r0
    2012:	25 9f       	mul	r18, r21
    2014:	90 0d       	add	r25, r0
    2016:	34 9f       	mul	r19, r20
    2018:	90 0d       	add	r25, r0
    201a:	11 24       	eor	r1, r1
    201c:	24 e6       	ldi	r18, 0x64	; 100
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	b9 01       	movw	r22, r18
    2022:	0e 94 4d 13 	call	0x269a	; 0x269a <__divmodhi4>
    2026:	cb 01       	movw	r24, r22
    2028:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR1_setCompareMatchValueA>
	TMR1_start();
    202c:	0e 94 76 07 	call	0xeec	; 0xeec <TMR1_start>
}
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <DCM_off>:

//Function to turn off the DC motor
void DCM_off(void)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	63 e0       	ldi	r22, 0x03	; 3
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	64 e0       	ldi	r22, 0x04	; 4
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_setPinValue>
}
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <main>:
void systemOn(void);
void systemOFF(void);

//MAIN
int main()
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	2e 97       	sbiw	r28, 0x0e	; 14
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
	//System initialization
	LED_init();
    206e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LED_init>
	GI_enable();
    2072:	0e 94 22 08 	call	0x1044	; 0x1044 <GI_enable>
	ADC_init();
    2076:	0e 94 ad 0c 	call	0x195a	; 0x195a <ADC_init>
	LM35_init();
    207a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <LM35_init>
	HTR_init();
    207e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <HTR_init>
	DCM_init();
    2082:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <DCM_init>
	SSD_init();
    2086:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <SSD_init>
	TMR0_init();
    208a:	0e 94 c0 07 	call	0xf80	; 0xf80 <TMR0_init>
	EEPROM_init();
    208e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <EEPROM_init>
	TMR0_setCompareMatchValue(249);
    2092:	89 ef       	ldi	r24, 0xF9	; 249
    2094:	0e 94 14 08 	call	0x1028	; 0x1028 <TMR0_setCompareMatchValue>
	TMR2_init();
    2098:	0e 94 d6 06 	call	0xdac	; 0xdac <TMR2_init>
	TMR2_setCompareMatchValue(249);
    209c:	89 ef       	ldi	r24, 0xF9	; 249
    209e:	0e 94 2a 07 	call	0xe54	; 0xe54 <TMR2_setCompareMatchValue>
	EXTI_enable(EXTI_INT0,EXTI_FALLING_EDGE); //External Interrupt Responsible for System State (ON or OFF)
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	61 e0       	ldi	r22, 0x01	; 1
    20a6:	0e 94 3e 08 	call	0x107c	; 0x107c <EXTI_enable>
	systemOFF();
    20aa:	0e 94 88 11 	call	0x2310	; 0x2310 <systemOFF>

	while (1)
	{

	//During Setting Mode
	if (SETTING_MODE == mode && state == ON)
    20ae:	80 91 68 00 	lds	r24, 0x0068
    20b2:	88 23       	and	r24, r24
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <main+0x5e>
    20b6:	7d c0       	rjmp	.+250    	; 0x21b2 <main+0x158>
    20b8:	80 91 75 00 	lds	r24, 0x0075
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	09 f0       	breq	.+2      	; 0x20c2 <main+0x68>
    20c0:	78 c0       	rjmp	.+240    	; 0x21b2 <main+0x158>
	{
		/*
		 *  Toggle the SSD
		 * Display the Change in the setting Temperature
		 */
		SSD_toggleState();
    20c2:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <SSD_toggleState>
		SSD_displayMultibleNum(Display_TEMP);
    20c6:	80 91 7f 00 	lds	r24, 0x007F
    20ca:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <SSD_displayMultibleNum>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	aa e7       	ldi	r26, 0x7A	; 122
    20d4:	b4 e4       	ldi	r27, 0x44	; 68
    20d6:	8b 87       	std	Y+11, r24	; 0x0b
    20d8:	9c 87       	std	Y+12, r25	; 0x0c
    20da:	ad 87       	std	Y+13, r26	; 0x0d
    20dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20de:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	4a e7       	ldi	r20, 0x7A	; 122
    20ec:	55 e4       	ldi	r21, 0x45	; 69
    20ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8f 83       	std	Y+7, r24	; 0x07
    20f8:	98 87       	std	Y+8, r25	; 0x08
    20fa:	a9 87       	std	Y+9, r26	; 0x09
    20fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2112:	88 23       	and	r24, r24
    2114:	2c f4       	brge	.+10     	; 0x2120 <main+0xc6>
		__ticks = 1;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9e 83       	std	Y+6, r25	; 0x06
    211c:	8d 83       	std	Y+5, r24	; 0x05
    211e:	3f c0       	rjmp	.+126    	; 0x219e <main+0x144>
	else if (__tmp > 65535)
    2120:	6f 81       	ldd	r22, Y+7	; 0x07
    2122:	78 85       	ldd	r23, Y+8	; 0x08
    2124:	89 85       	ldd	r24, Y+9	; 0x09
    2126:	9a 85       	ldd	r25, Y+10	; 0x0a
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	3f ef       	ldi	r19, 0xFF	; 255
    212c:	4f e7       	ldi	r20, 0x7F	; 127
    212e:	57 e4       	ldi	r21, 0x47	; 71
    2130:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2134:	18 16       	cp	r1, r24
    2136:	4c f5       	brge	.+82     	; 0x218a <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2138:	6b 85       	ldd	r22, Y+11	; 0x0b
    213a:	7c 85       	ldd	r23, Y+12	; 0x0c
    213c:	8d 85       	ldd	r24, Y+13	; 0x0d
    213e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e2       	ldi	r20, 0x20	; 32
    2146:	51 e4       	ldi	r21, 0x41	; 65
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	8d 83       	std	Y+5, r24	; 0x05
    2160:	0f c0       	rjmp	.+30     	; 0x2180 <main+0x126>
    2162:	80 e9       	ldi	r24, 0x90	; 144
    2164:	91 e0       	ldi	r25, 0x01	; 1
    2166:	9c 83       	std	Y+4, r25	; 0x04
    2168:	8b 83       	std	Y+3, r24	; 0x03
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <main+0x114>
    2172:	9c 83       	std	Y+4, r25	; 0x04
    2174:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	9e 83       	std	Y+6, r25	; 0x06
    217e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2180:	8d 81       	ldd	r24, Y+5	; 0x05
    2182:	9e 81       	ldd	r25, Y+6	; 0x06
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	69 f7       	brne	.-38     	; 0x2162 <main+0x108>
    2188:	14 c0       	rjmp	.+40     	; 0x21b2 <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218a:	6f 81       	ldd	r22, Y+7	; 0x07
    218c:	78 85       	ldd	r23, Y+8	; 0x08
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	9e 83       	std	Y+6, r25	; 0x06
    219c:	8d 83       	std	Y+5, r24	; 0x05
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
    21a0:	9e 81       	ldd	r25, Y+6	; 0x06
    21a2:	9a 83       	std	Y+2, r25	; 0x02
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <main+0x150>
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}

	//Comparing Temperatures

	if((Temp >= (SET_TEMP + 5)) && state == ON) //Above Set Temperature by 5 or more degrees
    21b2:	80 91 7d 00 	lds	r24, 0x007D
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	80 91 7c 00 	lds	r24, 0x007C
    21be:	88 2f       	mov	r24, r24
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	05 96       	adiw	r24, 0x05	; 5
    21c4:	28 17       	cp	r18, r24
    21c6:	39 07       	cpc	r19, r25
    21c8:	6c f0       	brlt	.+26     	; 0x21e4 <main+0x18a>
    21ca:	80 91 75 00 	lds	r24, 0x0075
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	49 f4       	brne	.+18     	; 0x21e4 <main+0x18a>
	{
		/*
		 * Turn On DC Motor (Cooler)
		 * Turn on LED
		 */
		DCM_on(CW);
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <DCM_on>
		DCM_ctrlSpeed(100);
    21d8:	84 e6       	ldi	r24, 0x64	; 100
    21da:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <DCM_ctrlSpeed>
		LED_on();
    21de:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LED_on>
    21e2:	65 cf       	rjmp	.-310    	; 0x20ae <main+0x54>
	}
	else if((Temp <= (SET_TEMP - 5)) && state == ON) //Bellow Set Temperature by 5 or more degrees
    21e4:	80 91 7d 00 	lds	r24, 0x007D
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	80 91 7c 00 	lds	r24, 0x007C
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	05 97       	sbiw	r24, 0x05	; 5
    21f6:	82 17       	cp	r24, r18
    21f8:	93 07       	cpc	r25, r19
    21fa:	54 f0       	brlt	.+20     	; 0x2210 <main+0x1b6>
    21fc:	80 91 75 00 	lds	r24, 0x0075
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	31 f4       	brne	.+12     	; 0x2210 <main+0x1b6>
	{
		HTR_ON();
    2204:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <HTR_ON>
		heat = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	80 93 74 00 	sts	0x0074, r24
    220e:	4f cf       	rjmp	.-354    	; 0x20ae <main+0x54>
	}
	else //Within acceptable range
	{
		//Turn of Heater, Cooler and LED
		 DCM_off();
    2210:	0e 94 1c 10 	call	0x2038	; 0x2038 <DCM_off>
		 LED_off();
    2214:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LED_off>
		 HTR_OFF();
    2218:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <HTR_OFF>
    221c:	48 cf       	rjmp	.-368    	; 0x20ae <main+0x54>

0000221e <TempSenseInit>:
	return 0;
}

//Function to initialize the temperature array
void TempSenseInit(void)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	0f 92       	push	r0
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 0; i < 10; i++)
    2228:	19 82       	std	Y+1, r1	; 0x01
    222a:	0a c0       	rjmp	.+20     	; 0x2240 <TempSenseInit+0x22>
	{
		LM35_tempSense(&Temparr[i]);
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	86 59       	subi	r24, 0x96	; 150
    2234:	9f 4f       	sbci	r25, 0xFF	; 255
    2236:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <LM35_tempSense>
}

//Function to initialize the temperature array
void TempSenseInit(void)
{
	for (u8 i = 0; i < 10; i++)
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	8f 5f       	subi	r24, 0xFF	; 255
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	8a 30       	cpi	r24, 0x0A	; 10
    2244:	98 f3       	brcs	.-26     	; 0x222c <TempSenseInit+0xe>
	{
		LM35_tempSense(&Temparr[i]);
	}
}
    2246:	0f 90       	pop	r0
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <TempAvg>:
/*
 * Function to calculate the average temperature from the values
 * stored in the Temperature array and returns it
 */
u8 TempAvg(void)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	00 d0       	rcall	.+0      	; 0x2254 <TempAvg+0x6>
    2254:	0f 92       	push	r0
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
	u16 averageTemp = 0;
    225a:	1b 82       	std	Y+3, r1	; 0x03
    225c:	1a 82       	std	Y+2, r1	; 0x02
	for (u8 i = 0; i < 10; i++)
    225e:	19 82       	std	Y+1, r1	; 0x01
    2260:	12 c0       	rjmp	.+36     	; 0x2286 <TempAvg+0x38>
	{
		averageTemp += Temparr[i];
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	fc 01       	movw	r30, r24
    226a:	e6 59       	subi	r30, 0x96	; 150
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	9b 81       	ldd	r25, Y+3	; 0x03
    2278:	82 0f       	add	r24, r18
    227a:	93 1f       	adc	r25, r19
    227c:	9b 83       	std	Y+3, r25	; 0x03
    227e:	8a 83       	std	Y+2, r24	; 0x02
 * stored in the Temperature array and returns it
 */
u8 TempAvg(void)
{
	u16 averageTemp = 0;
	for (u8 i = 0; i < 10; i++)
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	8f 5f       	subi	r24, 0xFF	; 255
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	8a 30       	cpi	r24, 0x0A	; 10
    228a:	58 f3       	brcs	.-42     	; 0x2262 <TempAvg+0x14>
	{
		averageTemp += Temparr[i];
	}
	averageTemp = averageTemp / 10;
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	9b 81       	ldd	r25, Y+3	; 0x03
    2290:	2a e0       	ldi	r18, 0x0A	; 10
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	b9 01       	movw	r22, r18
    2296:	0e 94 39 13 	call	0x2672	; 0x2672 <__udivmodhi4>
    229a:	cb 01       	movw	r24, r22
    229c:	9b 83       	std	Y+3, r25	; 0x03
    229e:	8a 83       	std	Y+2, r24	; 0x02
	return averageTemp;
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <systemOn>:
 * Function to turn on system components
 * Calls TempSenseInit and TempAvg functions to initialize temperature sensing
 * Sets the desired temperature based on EEPROM data
 */
void systemOn(void)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	0f 92       	push	r0
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62

	EXTI_enable(EXTI_INT1,EXTI_FALLING_EDGE);
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	0e 94 3e 08 	call	0x107c	; 0x107c <EXTI_enable>
	EXTI_enable(EXTI_INT2,EXTI_FALLING_EDGE);
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	0e 94 3e 08 	call	0x107c	; 0x107c <EXTI_enable>
	TMR0_start();
    22c8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <TMR0_start>
	TMR1_start();
    22cc:	0e 94 76 07 	call	0xeec	; 0xeec <TMR1_start>
	SSD_ON();
    22d0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SSD_ON>
	TempSenseInit();
    22d4:	0e 94 0f 11 	call	0x221e	; 0x221e <TempSenseInit>
	Temp = TempAvg();
    22d8:	0e 94 27 11 	call	0x224e	; 0x224e <TempAvg>
    22dc:	80 93 7d 00 	sts	0x007D, r24
	Tempindex = 0;
    22e0:	10 92 7e 00 	sts	0x007E, r1
	u8 data =  EEPROM_readByte(50);
    22e4:	82 e3       	ldi	r24, 0x32	; 50
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <EEPROM_readByte>
    22ec:	89 83       	std	Y+1, r24	; 0x01
	if (data > 75 || data < 35)
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	8c 34       	cpi	r24, 0x4C	; 76
    22f2:	18 f4       	brcc	.+6      	; 0x22fa <systemOn+0x4c>
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	83 32       	cpi	r24, 0x23	; 35
    22f8:	20 f4       	brcc	.+8      	; 0x2302 <systemOn+0x54>
	{
		SET_TEMP = 60;
    22fa:	8c e3       	ldi	r24, 0x3C	; 60
    22fc:	80 93 7c 00 	sts	0x007C, r24
    2300:	03 c0       	rjmp	.+6      	; 0x2308 <systemOn+0x5a>
	}
	else
	{
		SET_TEMP = data;
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	80 93 7c 00 	sts	0x007C, r24
	}

}
    2308:	0f 90       	pop	r0
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <systemOFF>:

//Function to turn off system components
void systemOFF(void)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
	EXTI_disable(EXTI_INT1);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	0e 94 32 09 	call	0x1264	; 0x1264 <EXTI_disable>
	EXTI_disable(EXTI_INT2);
    231e:	82 e0       	ldi	r24, 0x02	; 2
    2320:	0e 94 32 09 	call	0x1264	; 0x1264 <EXTI_disable>
	TMR0_stop();
    2324:	0e 94 f8 07 	call	0xff0	; 0xff0 <TMR0_stop>
	TMR1_stop();
    2328:	0e 94 92 07 	call	0xf24	; 0xf24 <TMR1_stop>
	TMR2_stop();
    232c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TMR2_stop>
	LED_off();
    2330:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LED_off>
	SSD_OFF();
    2334:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <SSD_OFF>
	DCM_off();
    2338:	0e 94 1c 10 	call	0x2038	; 0x2038 <DCM_off>
	HTR_OFF();
    233c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <HTR_OFF>
}
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <__vector_1>:


// ISR to checks the state of the system either turns it on or off
void __vector_1(void) __attribute__ ((signal));
void __vector_1(void)
{
    2346:	1f 92       	push	r1
    2348:	0f 92       	push	r0
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	0f 92       	push	r0
    234e:	11 24       	eor	r1, r1
    2350:	2f 93       	push	r18
    2352:	3f 93       	push	r19
    2354:	4f 93       	push	r20
    2356:	5f 93       	push	r21
    2358:	6f 93       	push	r22
    235a:	7f 93       	push	r23
    235c:	8f 93       	push	r24
    235e:	9f 93       	push	r25
    2360:	af 93       	push	r26
    2362:	bf 93       	push	r27
    2364:	ef 93       	push	r30
    2366:	ff 93       	push	r31
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
	if (state == OFF)
    2370:	80 91 75 00 	lds	r24, 0x0075
    2374:	88 23       	and	r24, r24
    2376:	31 f4       	brne	.+12     	; 0x2384 <__vector_1+0x3e>
	{
		systemOn();
    2378:	0e 94 57 11 	call	0x22ae	; 0x22ae <systemOn>
		state = ON;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 93 75 00 	sts	0x0075, r24
    2382:	04 c0       	rjmp	.+8      	; 0x238c <__vector_1+0x46>
	}
	else
	{
		systemOFF();
    2384:	0e 94 88 11 	call	0x2310	; 0x2310 <systemOFF>
		state = OFF;
    2388:	10 92 75 00 	sts	0x0075, r1
	}
}
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	ff 91       	pop	r31
    2392:	ef 91       	pop	r30
    2394:	bf 91       	pop	r27
    2396:	af 91       	pop	r26
    2398:	9f 91       	pop	r25
    239a:	8f 91       	pop	r24
    239c:	7f 91       	pop	r23
    239e:	6f 91       	pop	r22
    23a0:	5f 91       	pop	r21
    23a2:	4f 91       	pop	r20
    23a4:	3f 91       	pop	r19
    23a6:	2f 91       	pop	r18
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	0f 90       	pop	r0
    23ae:	1f 90       	pop	r1
    23b0:	18 95       	reti

000023b2 <__vector_2>:
 * ISR to enter the temperature setting mode or
 * increase the set temperature by 1 degrees
 */
void __vector_2(void) __attribute__ ((signal));
void __vector_2(void)
{
    23b2:	1f 92       	push	r1
    23b4:	0f 92       	push	r0
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	0f 92       	push	r0
    23ba:	11 24       	eor	r1, r1
    23bc:	2f 93       	push	r18
    23be:	3f 93       	push	r19
    23c0:	4f 93       	push	r20
    23c2:	5f 93       	push	r21
    23c4:	6f 93       	push	r22
    23c6:	7f 93       	push	r23
    23c8:	8f 93       	push	r24
    23ca:	9f 93       	push	r25
    23cc:	af 93       	push	r26
    23ce:	bf 93       	push	r27
    23d0:	ef 93       	push	r30
    23d2:	ff 93       	push	r31
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62

	ctcCounter2 = 0;
    23dc:	10 92 77 00 	sts	0x0077, r1
    23e0:	10 92 76 00 	sts	0x0076, r1
	if (NORMAL_MODE == mode)
    23e4:	80 91 68 00 	lds	r24, 0x0068
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	49 f4       	brne	.+18     	; 0x23fe <__vector_2+0x4c>
	{
		mode = SETTING_MODE;
    23ec:	10 92 68 00 	sts	0x0068, r1
		Display_TEMP = SET_TEMP;
    23f0:	80 91 7c 00 	lds	r24, 0x007C
    23f4:	80 93 7f 00 	sts	0x007F, r24
		TMR2_start();
    23f8:	0e 94 f2 06 	call	0xde4	; 0xde4 <TMR2_start>
    23fc:	0c c0       	rjmp	.+24     	; 0x2416 <__vector_2+0x64>
	}
	else
	{
		Display_TEMP += 1;
    23fe:	80 91 7f 00 	lds	r24, 0x007F
    2402:	8f 5f       	subi	r24, 0xFF	; 255
    2404:	80 93 7f 00 	sts	0x007F, r24
		if (Display_TEMP >= MAX_TEMP)
    2408:	80 91 7f 00 	lds	r24, 0x007F
    240c:	8b 34       	cpi	r24, 0x4B	; 75
    240e:	18 f0       	brcs	.+6      	; 0x2416 <__vector_2+0x64>
			Display_TEMP = MAX_TEMP;
    2410:	8b e4       	ldi	r24, 0x4B	; 75
    2412:	80 93 7f 00 	sts	0x007F, r24
	}


}
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	ff 91       	pop	r31
    241c:	ef 91       	pop	r30
    241e:	bf 91       	pop	r27
    2420:	af 91       	pop	r26
    2422:	9f 91       	pop	r25
    2424:	8f 91       	pop	r24
    2426:	7f 91       	pop	r23
    2428:	6f 91       	pop	r22
    242a:	5f 91       	pop	r21
    242c:	4f 91       	pop	r20
    242e:	3f 91       	pop	r19
    2430:	2f 91       	pop	r18
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	0f 90       	pop	r0
    2438:	1f 90       	pop	r1
    243a:	18 95       	reti

0000243c <__vector_3>:
 * ISR to enter the temperature setting mode or
 * decrease the set temperature by 1 degrees
 */
void __vector_3(void) __attribute__ ((signal));
void __vector_3(void)
{
    243c:	1f 92       	push	r1
    243e:	0f 92       	push	r0
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	0f 92       	push	r0
    2444:	11 24       	eor	r1, r1
    2446:	2f 93       	push	r18
    2448:	3f 93       	push	r19
    244a:	4f 93       	push	r20
    244c:	5f 93       	push	r21
    244e:	6f 93       	push	r22
    2450:	7f 93       	push	r23
    2452:	8f 93       	push	r24
    2454:	9f 93       	push	r25
    2456:	af 93       	push	r26
    2458:	bf 93       	push	r27
    245a:	ef 93       	push	r30
    245c:	ff 93       	push	r31
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62

	ctcCounter2 = 0; // Reset the counter
    2466:	10 92 77 00 	sts	0x0077, r1
    246a:	10 92 76 00 	sts	0x0076, r1
	if (NORMAL_MODE == mode)
    246e:	80 91 68 00 	lds	r24, 0x0068
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	49 f4       	brne	.+18     	; 0x2488 <__vector_3+0x4c>
	{
		mode = SETTING_MODE;
    2476:	10 92 68 00 	sts	0x0068, r1
		Display_TEMP = SET_TEMP;
    247a:	80 91 7c 00 	lds	r24, 0x007C
    247e:	80 93 7f 00 	sts	0x007F, r24
		TMR2_start();
    2482:	0e 94 f2 06 	call	0xde4	; 0xde4 <TMR2_start>
    2486:	0c c0       	rjmp	.+24     	; 0x24a0 <__vector_3+0x64>
	}
	else
	{
		Display_TEMP -= 1;
    2488:	80 91 7f 00 	lds	r24, 0x007F
    248c:	81 50       	subi	r24, 0x01	; 1
    248e:	80 93 7f 00 	sts	0x007F, r24
		if (Display_TEMP <= MIN_TEMP)
    2492:	80 91 7f 00 	lds	r24, 0x007F
    2496:	84 32       	cpi	r24, 0x24	; 36
    2498:	18 f4       	brcc	.+6      	; 0x24a0 <__vector_3+0x64>
			Display_TEMP = MIN_TEMP;
    249a:	83 e2       	ldi	r24, 0x23	; 35
    249c:	80 93 7f 00 	sts	0x007F, r24
	}


}
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	ff 91       	pop	r31
    24a6:	ef 91       	pop	r30
    24a8:	bf 91       	pop	r27
    24aa:	af 91       	pop	r26
    24ac:	9f 91       	pop	r25
    24ae:	8f 91       	pop	r24
    24b0:	7f 91       	pop	r23
    24b2:	6f 91       	pop	r22
    24b4:	5f 91       	pop	r21
    24b6:	4f 91       	pop	r20
    24b8:	3f 91       	pop	r19
    24ba:	2f 91       	pop	r18
    24bc:	0f 90       	pop	r0
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	0f 90       	pop	r0
    24c2:	1f 90       	pop	r1
    24c4:	18 95       	reti

000024c6 <__vector_4>:

//ISR to exit from the Temperature Setting mode and store the set temperature in EEPROM
void __vector_4(void) __attribute__ ((signal));
void __vector_4(void)
{
    24c6:	1f 92       	push	r1
    24c8:	0f 92       	push	r0
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	0f 92       	push	r0
    24ce:	11 24       	eor	r1, r1
    24d0:	2f 93       	push	r18
    24d2:	3f 93       	push	r19
    24d4:	4f 93       	push	r20
    24d6:	5f 93       	push	r21
    24d8:	6f 93       	push	r22
    24da:	7f 93       	push	r23
    24dc:	8f 93       	push	r24
    24de:	9f 93       	push	r25
    24e0:	af 93       	push	r26
    24e2:	bf 93       	push	r27
    24e4:	ef 93       	push	r30
    24e6:	ff 93       	push	r31
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62

	ctcCounter2++; // Increment the counter for Timer 2
    24f0:	80 91 76 00 	lds	r24, 0x0076
    24f4:	90 91 77 00 	lds	r25, 0x0077
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	90 93 77 00 	sts	0x0077, r25
    24fe:	80 93 76 00 	sts	0x0076, r24
	if(TMR2_CTC_COUNTER == ctcCounter2)
    2502:	80 91 76 00 	lds	r24, 0x0076
    2506:	90 91 77 00 	lds	r25, 0x0077
    250a:	23 e1       	ldi	r18, 0x13	; 19
    250c:	88 38       	cpi	r24, 0x88	; 136
    250e:	92 07       	cpc	r25, r18
    2510:	b1 f4       	brne	.+44     	; 0x253e <__vector_4+0x78>
	{
		// Reset the Timer 2 counter, stop Timer 2 and switch to Normal mode
		ctcCounter2 = 0;
    2512:	10 92 77 00 	sts	0x0077, r1
    2516:	10 92 76 00 	sts	0x0076, r1
		TMR2_stop();
    251a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TMR2_stop>
		mode = NORMAL_MODE;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	80 93 68 00 	sts	0x0068, r24
		// Update the SET_TEMP to the new Display_TEMP and save to EEPROM
		SET_TEMP = Display_TEMP;
    2524:	80 91 7f 00 	lds	r24, 0x007F
    2528:	80 93 7c 00 	sts	0x007C, r24
		EEPROM_writeByte(50,SET_TEMP);
    252c:	20 91 7c 00 	lds	r18, 0x007C
    2530:	82 e3       	ldi	r24, 0x32	; 50
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	62 2f       	mov	r22, r18
    2536:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <EEPROM_writeByte>
		SSD_ON(); //Ensure SSD is ON
    253a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SSD_ON>
	}
}
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	ff 91       	pop	r31
    2544:	ef 91       	pop	r30
    2546:	bf 91       	pop	r27
    2548:	af 91       	pop	r26
    254a:	9f 91       	pop	r25
    254c:	8f 91       	pop	r24
    254e:	7f 91       	pop	r23
    2550:	6f 91       	pop	r22
    2552:	5f 91       	pop	r21
    2554:	4f 91       	pop	r20
    2556:	3f 91       	pop	r19
    2558:	2f 91       	pop	r18
    255a:	0f 90       	pop	r0
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	0f 90       	pop	r0
    2560:	1f 90       	pop	r1
    2562:	18 95       	reti

00002564 <__vector_10>:
 * Calling Function to Calculate Average Temp
 * Toggle LED when Heater is ON
 */
void __vector_10(void) __attribute__ ((signal));
void __vector_10(void)
{
    2564:	1f 92       	push	r1
    2566:	0f 92       	push	r0
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	0f 92       	push	r0
    256c:	11 24       	eor	r1, r1
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	ef 93       	push	r30
    2584:	ff 93       	push	r31
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
	//Static Counters for Timer0
	static u16 ctcCounter1 = 0;
	static u16 ledCounter = 0;

	ctcCounter1++; //Increment the Temperature sense counter for Timer 0
    258e:	80 91 7a 00 	lds	r24, 0x007A
    2592:	90 91 7b 00 	lds	r25, 0x007B
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	90 93 7b 00 	sts	0x007B, r25
    259c:	80 93 7a 00 	sts	0x007A, r24

	if (heat == 1) //when Heater is ON
    25a0:	80 91 74 00 	lds	r24, 0x0074
    25a4:	81 30       	cpi	r24, 0x01	; 1
    25a6:	c1 f4       	brne	.+48     	; 0x25d8 <__vector_10+0x74>
	{
		ledCounter++; //Increment the Heater LED counter for Timer 0
    25a8:	80 91 78 00 	lds	r24, 0x0078
    25ac:	90 91 79 00 	lds	r25, 0x0079
    25b0:	01 96       	adiw	r24, 0x01	; 1
    25b2:	90 93 79 00 	sts	0x0079, r25
    25b6:	80 93 78 00 	sts	0x0078, r24

		if(ledCounter == 1000) //Toggle LED after a second when Heater is ON
    25ba:	80 91 78 00 	lds	r24, 0x0078
    25be:	90 91 79 00 	lds	r25, 0x0079
    25c2:	23 e0       	ldi	r18, 0x03	; 3
    25c4:	88 3e       	cpi	r24, 0xE8	; 232
    25c6:	92 07       	cpc	r25, r18
    25c8:	59 f4       	brne	.+22     	; 0x25e0 <__vector_10+0x7c>
			{
				LED_toggle();
    25ca:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LED_toggle>
				ledCounter  = 0; //Reset Heater LED counter for Timer 0
    25ce:	10 92 79 00 	sts	0x0079, r1
    25d2:	10 92 78 00 	sts	0x0078, r1
    25d6:	04 c0       	rjmp	.+8      	; 0x25e0 <__vector_10+0x7c>
			}
	}
	else
		ledCounter = 0; //Reset Heater LED counter for Timer 0 when Heater is OFF
    25d8:	10 92 79 00 	sts	0x0079, r1
    25dc:	10 92 78 00 	sts	0x0078, r1


	if(TMR0_CTC_COUNTER == ctcCounter1)
    25e0:	80 91 7a 00 	lds	r24, 0x007A
    25e4:	90 91 7b 00 	lds	r25, 0x007B
    25e8:	84 36       	cpi	r24, 0x64	; 100
    25ea:	91 05       	cpc	r25, r1
    25ec:	19 f5       	brne	.+70     	; 0x2634 <__vector_10+0xd0>
	{
		ctcCounter1 = 0; //Reset emperature sense counter for Timer 0
    25ee:	10 92 7b 00 	sts	0x007B, r1
    25f2:	10 92 7a 00 	sts	0x007A, r1

		//Storing Temperature Sensor Readings in the Temperature array
		if(Tempindex > 10)
    25f6:	80 91 7e 00 	lds	r24, 0x007E
    25fa:	8b 30       	cpi	r24, 0x0B	; 11
    25fc:	10 f0       	brcs	.+4      	; 0x2602 <__vector_10+0x9e>
			Tempindex = 0;
    25fe:	10 92 7e 00 	sts	0x007E, r1
		LM35_tempSense(&Temparr[Tempindex]);
    2602:	80 91 7e 00 	lds	r24, 0x007E
    2606:	88 2f       	mov	r24, r24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	86 59       	subi	r24, 0x96	; 150
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <LM35_tempSense>
		Tempindex++;
    2612:	80 91 7e 00 	lds	r24, 0x007E
    2616:	8f 5f       	subi	r24, 0xFF	; 255
    2618:	80 93 7e 00 	sts	0x007E, r24

		Temp = TempAvg(); //Calculate Temperature Average
    261c:	0e 94 27 11 	call	0x224e	; 0x224e <TempAvg>
    2620:	80 93 7d 00 	sts	0x007D, r24

		//Display Average Temperature on the SSD during Normal Mode
		if (NORMAL_MODE == mode)
    2624:	80 91 68 00 	lds	r24, 0x0068
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	21 f4       	brne	.+8      	; 0x2634 <__vector_10+0xd0>
		{
		SSD_displayMultibleNum(Temp);
    262c:	80 91 7d 00 	lds	r24, 0x007D
    2630:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <SSD_displayMultibleNum>
		}
	}
}
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	ff 91       	pop	r31
    263a:	ef 91       	pop	r30
    263c:	bf 91       	pop	r27
    263e:	af 91       	pop	r26
    2640:	9f 91       	pop	r25
    2642:	8f 91       	pop	r24
    2644:	7f 91       	pop	r23
    2646:	6f 91       	pop	r22
    2648:	5f 91       	pop	r21
    264a:	4f 91       	pop	r20
    264c:	3f 91       	pop	r19
    264e:	2f 91       	pop	r18
    2650:	0f 90       	pop	r0
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	0f 90       	pop	r0
    2656:	1f 90       	pop	r1
    2658:	18 95       	reti

0000265a <__udivmodqi4>:
    265a:	99 1b       	sub	r25, r25
    265c:	79 e0       	ldi	r23, 0x09	; 9
    265e:	04 c0       	rjmp	.+8      	; 0x2668 <__udivmodqi4_ep>

00002660 <__udivmodqi4_loop>:
    2660:	99 1f       	adc	r25, r25
    2662:	96 17       	cp	r25, r22
    2664:	08 f0       	brcs	.+2      	; 0x2668 <__udivmodqi4_ep>
    2666:	96 1b       	sub	r25, r22

00002668 <__udivmodqi4_ep>:
    2668:	88 1f       	adc	r24, r24
    266a:	7a 95       	dec	r23
    266c:	c9 f7       	brne	.-14     	; 0x2660 <__udivmodqi4_loop>
    266e:	80 95       	com	r24
    2670:	08 95       	ret

00002672 <__udivmodhi4>:
    2672:	aa 1b       	sub	r26, r26
    2674:	bb 1b       	sub	r27, r27
    2676:	51 e1       	ldi	r21, 0x11	; 17
    2678:	07 c0       	rjmp	.+14     	; 0x2688 <__udivmodhi4_ep>

0000267a <__udivmodhi4_loop>:
    267a:	aa 1f       	adc	r26, r26
    267c:	bb 1f       	adc	r27, r27
    267e:	a6 17       	cp	r26, r22
    2680:	b7 07       	cpc	r27, r23
    2682:	10 f0       	brcs	.+4      	; 0x2688 <__udivmodhi4_ep>
    2684:	a6 1b       	sub	r26, r22
    2686:	b7 0b       	sbc	r27, r23

00002688 <__udivmodhi4_ep>:
    2688:	88 1f       	adc	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	5a 95       	dec	r21
    268e:	a9 f7       	brne	.-22     	; 0x267a <__udivmodhi4_loop>
    2690:	80 95       	com	r24
    2692:	90 95       	com	r25
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	08 95       	ret

0000269a <__divmodhi4>:
    269a:	97 fb       	bst	r25, 7
    269c:	09 2e       	mov	r0, r25
    269e:	07 26       	eor	r0, r23
    26a0:	0a d0       	rcall	.+20     	; 0x26b6 <__divmodhi4_neg1>
    26a2:	77 fd       	sbrc	r23, 7
    26a4:	04 d0       	rcall	.+8      	; 0x26ae <__divmodhi4_neg2>
    26a6:	e5 df       	rcall	.-54     	; 0x2672 <__udivmodhi4>
    26a8:	06 d0       	rcall	.+12     	; 0x26b6 <__divmodhi4_neg1>
    26aa:	00 20       	and	r0, r0
    26ac:	1a f4       	brpl	.+6      	; 0x26b4 <__divmodhi4_exit>

000026ae <__divmodhi4_neg2>:
    26ae:	70 95       	com	r23
    26b0:	61 95       	neg	r22
    26b2:	7f 4f       	sbci	r23, 0xFF	; 255

000026b4 <__divmodhi4_exit>:
    26b4:	08 95       	ret

000026b6 <__divmodhi4_neg1>:
    26b6:	f6 f7       	brtc	.-4      	; 0x26b4 <__divmodhi4_exit>
    26b8:	90 95       	com	r25
    26ba:	81 95       	neg	r24
    26bc:	9f 4f       	sbci	r25, 0xFF	; 255
    26be:	08 95       	ret

000026c0 <__prologue_saves__>:
    26c0:	2f 92       	push	r2
    26c2:	3f 92       	push	r3
    26c4:	4f 92       	push	r4
    26c6:	5f 92       	push	r5
    26c8:	6f 92       	push	r6
    26ca:	7f 92       	push	r7
    26cc:	8f 92       	push	r8
    26ce:	9f 92       	push	r9
    26d0:	af 92       	push	r10
    26d2:	bf 92       	push	r11
    26d4:	cf 92       	push	r12
    26d6:	df 92       	push	r13
    26d8:	ef 92       	push	r14
    26da:	ff 92       	push	r15
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	ca 1b       	sub	r28, r26
    26ea:	db 0b       	sbc	r29, r27
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	09 94       	ijmp

000026f8 <__epilogue_restores__>:
    26f8:	2a 88       	ldd	r2, Y+18	; 0x12
    26fa:	39 88       	ldd	r3, Y+17	; 0x11
    26fc:	48 88       	ldd	r4, Y+16	; 0x10
    26fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2700:	6e 84       	ldd	r6, Y+14	; 0x0e
    2702:	7d 84       	ldd	r7, Y+13	; 0x0d
    2704:	8c 84       	ldd	r8, Y+12	; 0x0c
    2706:	9b 84       	ldd	r9, Y+11	; 0x0b
    2708:	aa 84       	ldd	r10, Y+10	; 0x0a
    270a:	b9 84       	ldd	r11, Y+9	; 0x09
    270c:	c8 84       	ldd	r12, Y+8	; 0x08
    270e:	df 80       	ldd	r13, Y+7	; 0x07
    2710:	ee 80       	ldd	r14, Y+6	; 0x06
    2712:	fd 80       	ldd	r15, Y+5	; 0x05
    2714:	0c 81       	ldd	r16, Y+4	; 0x04
    2716:	1b 81       	ldd	r17, Y+3	; 0x03
    2718:	aa 81       	ldd	r26, Y+2	; 0x02
    271a:	b9 81       	ldd	r27, Y+1	; 0x01
    271c:	ce 0f       	add	r28, r30
    271e:	d1 1d       	adc	r29, r1
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	ed 01       	movw	r28, r26
    272c:	08 95       	ret

0000272e <_exit>:
    272e:	f8 94       	cli

00002730 <__stop_program>:
    2730:	ff cf       	rjmp	.-2      	; 0x2730 <__stop_program>
